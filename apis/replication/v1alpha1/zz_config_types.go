// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfigInitParameters struct {

	// Cron expression to control the operation frequency.
	CronExp *string `json:"cronExp,omitempty" tf:"cron_exp,omitempty"`

	EnableEventReplication *bool `json:"enableEventReplication,omitempty" tf:"enable_event_replication,omitempty"`

	Replications []ReplicationsInitParameters `json:"replications,omitempty" tf:"replications,omitempty"`

	RepoKey *string `json:"repoKey,omitempty" tf:"repo_key,omitempty"`
}

type ConfigObservation struct {

	// Cron expression to control the operation frequency.
	CronExp *string `json:"cronExp,omitempty" tf:"cron_exp,omitempty"`

	EnableEventReplication *bool `json:"enableEventReplication,omitempty" tf:"enable_event_replication,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Replications []ReplicationsObservation `json:"replications,omitempty" tf:"replications,omitempty"`

	RepoKey *string `json:"repoKey,omitempty" tf:"repo_key,omitempty"`
}

type ConfigParameters struct {

	// Cron expression to control the operation frequency.
	// +kubebuilder:validation:Optional
	CronExp *string `json:"cronExp,omitempty" tf:"cron_exp,omitempty"`

	// +kubebuilder:validation:Optional
	EnableEventReplication *bool `json:"enableEventReplication,omitempty" tf:"enable_event_replication,omitempty"`

	// +kubebuilder:validation:Optional
	Replications []ReplicationsParameters `json:"replications,omitempty" tf:"replications,omitempty"`

	// +kubebuilder:validation:Optional
	RepoKey *string `json:"repoKey,omitempty" tf:"repo_key,omitempty"`
}

type ReplicationsInitParameters struct {
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	PathPrefix *string `json:"pathPrefix,omitempty" tf:"path_prefix,omitempty"`

	// Proxy key from Artifactory Proxies setting
	Proxy *string `json:"proxy,omitempty" tf:"proxy,omitempty"`

	SocketTimeoutMillis *float64 `json:"socketTimeoutMillis,omitempty" tf:"socket_timeout_millis,omitempty"`

	SyncDeletes *bool `json:"syncDeletes,omitempty" tf:"sync_deletes,omitempty"`

	SyncProperties *bool `json:"syncProperties,omitempty" tf:"sync_properties,omitempty"`

	SyncStatistics *bool `json:"syncStatistics,omitempty" tf:"sync_statistics,omitempty"`

	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type ReplicationsObservation struct {
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	PathPrefix *string `json:"pathPrefix,omitempty" tf:"path_prefix,omitempty"`

	// Proxy key from Artifactory Proxies setting
	Proxy *string `json:"proxy,omitempty" tf:"proxy,omitempty"`

	SocketTimeoutMillis *float64 `json:"socketTimeoutMillis,omitempty" tf:"socket_timeout_millis,omitempty"`

	SyncDeletes *bool `json:"syncDeletes,omitempty" tf:"sync_deletes,omitempty"`

	SyncProperties *bool `json:"syncProperties,omitempty" tf:"sync_properties,omitempty"`

	SyncStatistics *bool `json:"syncStatistics,omitempty" tf:"sync_statistics,omitempty"`

	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type ReplicationsParameters struct {

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	PathPrefix *string `json:"pathPrefix,omitempty" tf:"path_prefix,omitempty"`

	// Proxy key from Artifactory Proxies setting
	// +kubebuilder:validation:Optional
	Proxy *string `json:"proxy,omitempty" tf:"proxy,omitempty"`

	// +kubebuilder:validation:Optional
	SocketTimeoutMillis *float64 `json:"socketTimeoutMillis,omitempty" tf:"socket_timeout_millis,omitempty"`

	// +kubebuilder:validation:Optional
	SyncDeletes *bool `json:"syncDeletes,omitempty" tf:"sync_deletes,omitempty"`

	// +kubebuilder:validation:Optional
	SyncProperties *bool `json:"syncProperties,omitempty" tf:"sync_properties,omitempty"`

	// +kubebuilder:validation:Optional
	SyncStatistics *bool `json:"syncStatistics,omitempty" tf:"sync_statistics,omitempty"`

	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

// ConfigSpec defines the desired state of Config
type ConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConfigParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ConfigInitParameters `json:"initProvider,omitempty"`
}

// ConfigStatus defines the observed state of Config.
type ConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Config is the Schema for the Configs API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,artifactory}
type Config struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.cronExp) || (has(self.initProvider) && has(self.initProvider.cronExp))",message="spec.forProvider.cronExp is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.repoKey) || (has(self.initProvider) && has(self.initProvider.repoKey))",message="spec.forProvider.repoKey is a required parameter"
	Spec   ConfigSpec   `json:"spec"`
	Status ConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigList contains a list of Configs
type ConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Config `json:"items"`
}

// Repository type metadata.
var (
	Config_Kind             = "Config"
	Config_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Config_Kind}.String()
	Config_KindAPIVersion   = Config_Kind + "." + CRDGroupVersion.String()
	Config_GroupVersionKind = CRDGroupVersion.WithKind(Config_Kind)
)

func init() {
	SchemeBuilder.Register(&Config{}, &ConfigList{})
}
