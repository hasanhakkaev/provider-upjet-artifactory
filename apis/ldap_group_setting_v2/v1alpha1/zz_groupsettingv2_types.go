// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GroupSettingV2InitParameters struct {

	// (String) An attribute on the group entry which denoting the group description. Used when importing groups.
	// An attribute on the group entry which denoting the group description. Used when importing groups.
	DescriptionAttribute *string `json:"descriptionAttribute,omitempty" tf:"description_attribute,omitempty"`

	// (String) The LDAP setting key you want to use for group retrieval.
	// The LDAP setting key you want to use for group retrieval.
	EnabledLdap *string `json:"enabledLdap,omitempty" tf:"enabled_ldap,omitempty"`

	// (String) The LDAP filter used to search for group entries. Used for importing groups.
	// The LDAP filter used to search for group entries. Used for importing groups.
	Filter *string `json:"filter,omitempty" tf:"filter,omitempty"`

	// (Boolean) This attribute is used in very specific cases of LDAP group settings. Don't switch it to false, unless instructed by the JFrog support team. Default value is false.
	// This attribute is used in very specific cases of LDAP group settings. Don't switch it to `false`, unless instructed by the JFrog support team. Default value is `false`.
	ForceAttributeSearch *bool `json:"forceAttributeSearch,omitempty" tf:"force_attribute_search,omitempty"`

	// (String) A search base for group entry DNs, relative to the DN on the LDAP server’s URL (and not relative to the LDAP Setting’s “Search Base”). Used when importing groups.
	// A search base for group entry DNs, relative to the DN on the LDAP server’s URL (and not relative to the LDAP Setting’s “Search Base”). Used when importing groups.
	GroupBaseDn *string `json:"groupBaseDn,omitempty" tf:"group_base_dn,omitempty"`

	// value attribute on the group entry containing user DNs or IDs of the group members (e.g., uniqueMember, member).
	// A multi-value attribute on the group entry containing user DNs or IDs of the group members (e.g., uniqueMember, member).
	GroupMemberAttribute *string `json:"groupMemberAttribute,omitempty" tf:"group_member_attribute,omitempty"`

	// (String) Attribute on the group entry denoting the group name. Used when importing groups.
	// Attribute on the group entry denoting the group name. Used when importing groups.
	GroupNameAttribute *string `json:"groupNameAttribute,omitempty" tf:"group_name_attribute,omitempty"`

	// (String) Ldap group setting name.
	// Ldap group setting name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The JFrog Platform Deployment (JPD) supports three ways of mapping groups to LDAP schemas: STATIC: Group objects are aware of their members, however, the users are not aware of the groups they belong to. Each group object such as groupOfNames or groupOfUniqueNames holds its respective member attributes, typically member or uniqueMember, which is a user DN. DYNAMIC: User objects are aware of what groups they belong to, but the group objects are not aware of their members. Each user object contains a custom attribute, such as group, that holds the group DNs or group names of which the user is a member. HIERARCHICAL: The user's DN is indicative of the groups the user belongs to by using group names as part of user DN hierarchy. Each user DN contains a list of ou's or custom attributes that make up the group association. For example, uid=user1,ou=developers,ou=uk,dc=jfrog,dc=org indicates that user1 belongs to two groups: uk and developers. Valid values are: STATIC, DYNAMIC, HIERARCHICAL, case sensitive, all caps.
	// The JFrog Platform Deployment (JPD) supports three ways of mapping groups to LDAP schemas: STATIC: Group objects are aware of their members, however, the users are not aware of the groups they belong to. Each group object such as groupOfNames or groupOfUniqueNames holds its respective member attributes, typically member or uniqueMember, which is a user DN. DYNAMIC: User objects are aware of what groups they belong to, but the group objects are not aware of their members. Each user object contains a custom attribute, such as group, that holds the group DNs or group names of which the user is a member. HIERARCHICAL: The user's DN is indicative of the groups the user belongs to by using group names as part of user DN hierarchy. Each user DN contains a list of ou's or custom attributes that make up the group association. For example, `uid=user1,ou=developers,ou=uk,dc=jfrog,dc=org` indicates that `user1` belongs to two groups: `uk` and `developers`. Valid values are: `STATIC`, `DYNAMIC`, `HIERARCHICAL`, case sensitive, all caps.
	Strategy *string `json:"strategy,omitempty" tf:"strategy,omitempty"`

	// tree of the LDAP URL + Search Base. true by default. sub_tree can be set to true only with STATIC or DYNAMIC strategy.
	// When set, enables deep search through the sub-tree of the LDAP URL + Search Base. `true` by default. `sub_tree` can be set to true only with `STATIC` or `DYNAMIC` strategy.
	SubTree *bool `json:"subTree,omitempty" tf:"sub_tree,omitempty"`
}

type GroupSettingV2Observation struct {

	// (String) An attribute on the group entry which denoting the group description. Used when importing groups.
	// An attribute on the group entry which denoting the group description. Used when importing groups.
	DescriptionAttribute *string `json:"descriptionAttribute,omitempty" tf:"description_attribute,omitempty"`

	// (String) The LDAP setting key you want to use for group retrieval.
	// The LDAP setting key you want to use for group retrieval.
	EnabledLdap *string `json:"enabledLdap,omitempty" tf:"enabled_ldap,omitempty"`

	// (String) The LDAP filter used to search for group entries. Used for importing groups.
	// The LDAP filter used to search for group entries. Used for importing groups.
	Filter *string `json:"filter,omitempty" tf:"filter,omitempty"`

	// (Boolean) This attribute is used in very specific cases of LDAP group settings. Don't switch it to false, unless instructed by the JFrog support team. Default value is false.
	// This attribute is used in very specific cases of LDAP group settings. Don't switch it to `false`, unless instructed by the JFrog support team. Default value is `false`.
	ForceAttributeSearch *bool `json:"forceAttributeSearch,omitempty" tf:"force_attribute_search,omitempty"`

	// (String) A search base for group entry DNs, relative to the DN on the LDAP server’s URL (and not relative to the LDAP Setting’s “Search Base”). Used when importing groups.
	// A search base for group entry DNs, relative to the DN on the LDAP server’s URL (and not relative to the LDAP Setting’s “Search Base”). Used when importing groups.
	GroupBaseDn *string `json:"groupBaseDn,omitempty" tf:"group_base_dn,omitempty"`

	// value attribute on the group entry containing user DNs or IDs of the group members (e.g., uniqueMember, member).
	// A multi-value attribute on the group entry containing user DNs or IDs of the group members (e.g., uniqueMember, member).
	GroupMemberAttribute *string `json:"groupMemberAttribute,omitempty" tf:"group_member_attribute,omitempty"`

	// (String) Attribute on the group entry denoting the group name. Used when importing groups.
	// Attribute on the group entry denoting the group name. Used when importing groups.
	GroupNameAttribute *string `json:"groupNameAttribute,omitempty" tf:"group_name_attribute,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Ldap group setting name.
	// Ldap group setting name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The JFrog Platform Deployment (JPD) supports three ways of mapping groups to LDAP schemas: STATIC: Group objects are aware of their members, however, the users are not aware of the groups they belong to. Each group object such as groupOfNames or groupOfUniqueNames holds its respective member attributes, typically member or uniqueMember, which is a user DN. DYNAMIC: User objects are aware of what groups they belong to, but the group objects are not aware of their members. Each user object contains a custom attribute, such as group, that holds the group DNs or group names of which the user is a member. HIERARCHICAL: The user's DN is indicative of the groups the user belongs to by using group names as part of user DN hierarchy. Each user DN contains a list of ou's or custom attributes that make up the group association. For example, uid=user1,ou=developers,ou=uk,dc=jfrog,dc=org indicates that user1 belongs to two groups: uk and developers. Valid values are: STATIC, DYNAMIC, HIERARCHICAL, case sensitive, all caps.
	// The JFrog Platform Deployment (JPD) supports three ways of mapping groups to LDAP schemas: STATIC: Group objects are aware of their members, however, the users are not aware of the groups they belong to. Each group object such as groupOfNames or groupOfUniqueNames holds its respective member attributes, typically member or uniqueMember, which is a user DN. DYNAMIC: User objects are aware of what groups they belong to, but the group objects are not aware of their members. Each user object contains a custom attribute, such as group, that holds the group DNs or group names of which the user is a member. HIERARCHICAL: The user's DN is indicative of the groups the user belongs to by using group names as part of user DN hierarchy. Each user DN contains a list of ou's or custom attributes that make up the group association. For example, `uid=user1,ou=developers,ou=uk,dc=jfrog,dc=org` indicates that `user1` belongs to two groups: `uk` and `developers`. Valid values are: `STATIC`, `DYNAMIC`, `HIERARCHICAL`, case sensitive, all caps.
	Strategy *string `json:"strategy,omitempty" tf:"strategy,omitempty"`

	// tree of the LDAP URL + Search Base. true by default. sub_tree can be set to true only with STATIC or DYNAMIC strategy.
	// When set, enables deep search through the sub-tree of the LDAP URL + Search Base. `true` by default. `sub_tree` can be set to true only with `STATIC` or `DYNAMIC` strategy.
	SubTree *bool `json:"subTree,omitempty" tf:"sub_tree,omitempty"`
}

type GroupSettingV2Parameters struct {

	// (String) An attribute on the group entry which denoting the group description. Used when importing groups.
	// An attribute on the group entry which denoting the group description. Used when importing groups.
	// +kubebuilder:validation:Optional
	DescriptionAttribute *string `json:"descriptionAttribute,omitempty" tf:"description_attribute,omitempty"`

	// (String) The LDAP setting key you want to use for group retrieval.
	// The LDAP setting key you want to use for group retrieval.
	// +kubebuilder:validation:Optional
	EnabledLdap *string `json:"enabledLdap,omitempty" tf:"enabled_ldap,omitempty"`

	// (String) The LDAP filter used to search for group entries. Used for importing groups.
	// The LDAP filter used to search for group entries. Used for importing groups.
	// +kubebuilder:validation:Optional
	Filter *string `json:"filter,omitempty" tf:"filter,omitempty"`

	// (Boolean) This attribute is used in very specific cases of LDAP group settings. Don't switch it to false, unless instructed by the JFrog support team. Default value is false.
	// This attribute is used in very specific cases of LDAP group settings. Don't switch it to `false`, unless instructed by the JFrog support team. Default value is `false`.
	// +kubebuilder:validation:Optional
	ForceAttributeSearch *bool `json:"forceAttributeSearch,omitempty" tf:"force_attribute_search,omitempty"`

	// (String) A search base for group entry DNs, relative to the DN on the LDAP server’s URL (and not relative to the LDAP Setting’s “Search Base”). Used when importing groups.
	// A search base for group entry DNs, relative to the DN on the LDAP server’s URL (and not relative to the LDAP Setting’s “Search Base”). Used when importing groups.
	// +kubebuilder:validation:Optional
	GroupBaseDn *string `json:"groupBaseDn,omitempty" tf:"group_base_dn,omitempty"`

	// value attribute on the group entry containing user DNs or IDs of the group members (e.g., uniqueMember, member).
	// A multi-value attribute on the group entry containing user DNs or IDs of the group members (e.g., uniqueMember, member).
	// +kubebuilder:validation:Optional
	GroupMemberAttribute *string `json:"groupMemberAttribute,omitempty" tf:"group_member_attribute,omitempty"`

	// (String) Attribute on the group entry denoting the group name. Used when importing groups.
	// Attribute on the group entry denoting the group name. Used when importing groups.
	// +kubebuilder:validation:Optional
	GroupNameAttribute *string `json:"groupNameAttribute,omitempty" tf:"group_name_attribute,omitempty"`

	// (String) Ldap group setting name.
	// Ldap group setting name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The JFrog Platform Deployment (JPD) supports three ways of mapping groups to LDAP schemas: STATIC: Group objects are aware of their members, however, the users are not aware of the groups they belong to. Each group object such as groupOfNames or groupOfUniqueNames holds its respective member attributes, typically member or uniqueMember, which is a user DN. DYNAMIC: User objects are aware of what groups they belong to, but the group objects are not aware of their members. Each user object contains a custom attribute, such as group, that holds the group DNs or group names of which the user is a member. HIERARCHICAL: The user's DN is indicative of the groups the user belongs to by using group names as part of user DN hierarchy. Each user DN contains a list of ou's or custom attributes that make up the group association. For example, uid=user1,ou=developers,ou=uk,dc=jfrog,dc=org indicates that user1 belongs to two groups: uk and developers. Valid values are: STATIC, DYNAMIC, HIERARCHICAL, case sensitive, all caps.
	// The JFrog Platform Deployment (JPD) supports three ways of mapping groups to LDAP schemas: STATIC: Group objects are aware of their members, however, the users are not aware of the groups they belong to. Each group object such as groupOfNames or groupOfUniqueNames holds its respective member attributes, typically member or uniqueMember, which is a user DN. DYNAMIC: User objects are aware of what groups they belong to, but the group objects are not aware of their members. Each user object contains a custom attribute, such as group, that holds the group DNs or group names of which the user is a member. HIERARCHICAL: The user's DN is indicative of the groups the user belongs to by using group names as part of user DN hierarchy. Each user DN contains a list of ou's or custom attributes that make up the group association. For example, `uid=user1,ou=developers,ou=uk,dc=jfrog,dc=org` indicates that `user1` belongs to two groups: `uk` and `developers`. Valid values are: `STATIC`, `DYNAMIC`, `HIERARCHICAL`, case sensitive, all caps.
	// +kubebuilder:validation:Optional
	Strategy *string `json:"strategy,omitempty" tf:"strategy,omitempty"`

	// tree of the LDAP URL + Search Base. true by default. sub_tree can be set to true only with STATIC or DYNAMIC strategy.
	// When set, enables deep search through the sub-tree of the LDAP URL + Search Base. `true` by default. `sub_tree` can be set to true only with `STATIC` or `DYNAMIC` strategy.
	// +kubebuilder:validation:Optional
	SubTree *bool `json:"subTree,omitempty" tf:"sub_tree,omitempty"`
}

// GroupSettingV2Spec defines the desired state of GroupSettingV2
type GroupSettingV2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GroupSettingV2Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider GroupSettingV2InitParameters `json:"initProvider,omitempty"`
}

// GroupSettingV2Status defines the observed state of GroupSettingV2.
type GroupSettingV2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GroupSettingV2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// GroupSettingV2 is the Schema for the GroupSettingV2s API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,artifactory}
type GroupSettingV2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.descriptionAttribute) || (has(self.initProvider) && has(self.initProvider.descriptionAttribute))",message="spec.forProvider.descriptionAttribute is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.filter) || (has(self.initProvider) && has(self.initProvider.filter))",message="spec.forProvider.filter is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.groupMemberAttribute) || (has(self.initProvider) && has(self.initProvider.groupMemberAttribute))",message="spec.forProvider.groupMemberAttribute is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.groupNameAttribute) || (has(self.initProvider) && has(self.initProvider.groupNameAttribute))",message="spec.forProvider.groupNameAttribute is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.strategy) || (has(self.initProvider) && has(self.initProvider.strategy))",message="spec.forProvider.strategy is a required parameter"
	Spec   GroupSettingV2Spec   `json:"spec"`
	Status GroupSettingV2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GroupSettingV2List contains a list of GroupSettingV2s
type GroupSettingV2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GroupSettingV2 `json:"items"`
}

// Repository type metadata.
var (
	GroupSettingV2_Kind             = "GroupSettingV2"
	GroupSettingV2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GroupSettingV2_Kind}.String()
	GroupSettingV2_KindAPIVersion   = GroupSettingV2_Kind + "." + CRDGroupVersion.String()
	GroupSettingV2_GroupVersionKind = CRDGroupVersion.WithKind(GroupSettingV2_Kind)
)

func init() {
	SchemeBuilder.Register(&GroupSettingV2{}, &GroupSettingV2List{})
}
