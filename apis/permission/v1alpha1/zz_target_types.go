// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ActionsGroupsInitParameters struct {
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +listType=set
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`
}

type ActionsGroupsObservation struct {
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +listType=set
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`
}

type ActionsGroupsParameters struct {

	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	// +listType=set
	Permissions []*string `json:"permissions" tf:"permissions,omitempty"`
}

type ActionsInitParameters struct {
	Groups []GroupsInitParameters `json:"groups,omitempty" tf:"groups,omitempty"`

	Users []UsersInitParameters `json:"users,omitempty" tf:"users,omitempty"`
}

type ActionsObservation struct {
	Groups []GroupsObservation `json:"groups,omitempty" tf:"groups,omitempty"`

	Users []UsersObservation `json:"users,omitempty" tf:"users,omitempty"`
}

type ActionsParameters struct {

	// +kubebuilder:validation:Optional
	Groups []GroupsParameters `json:"groups,omitempty" tf:"groups,omitempty"`

	// +kubebuilder:validation:Optional
	Users []UsersParameters `json:"users,omitempty" tf:"users,omitempty"`
}

type ActionsUsersInitParameters struct {
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +listType=set
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`
}

type ActionsUsersObservation struct {
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +listType=set
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`
}

type ActionsUsersParameters struct {

	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	// +listType=set
	Permissions []*string `json:"permissions" tf:"permissions,omitempty"`
}

type BuildInitParameters struct {
	Actions []ActionsInitParameters `json:"actions,omitempty" tf:"actions,omitempty"`

	// The default value will be [] if nothing is supplied
	// +listType=set
	ExcludesPattern []*string `json:"excludesPattern,omitempty" tf:"excludes_pattern,omitempty"`

	// The default value will be [""] if nothing is supplied
	// +listType=set
	IncludesPattern []*string `json:"includesPattern,omitempty" tf:"includes_pattern,omitempty"`

	// This can only be 1 value: "artifactory-build-info", and currently, validation of sets/lists is not allowed. Artifactory will reject the request if you change this
	// +listType=set
	Repositories []*string `json:"repositories,omitempty" tf:"repositories,omitempty"`
}

type BuildObservation struct {
	Actions []ActionsObservation `json:"actions,omitempty" tf:"actions,omitempty"`

	// The default value will be [] if nothing is supplied
	// +listType=set
	ExcludesPattern []*string `json:"excludesPattern,omitempty" tf:"excludes_pattern,omitempty"`

	// The default value will be [""] if nothing is supplied
	// +listType=set
	IncludesPattern []*string `json:"includesPattern,omitempty" tf:"includes_pattern,omitempty"`

	// This can only be 1 value: "artifactory-build-info", and currently, validation of sets/lists is not allowed. Artifactory will reject the request if you change this
	// +listType=set
	Repositories []*string `json:"repositories,omitempty" tf:"repositories,omitempty"`
}

type BuildParameters struct {

	// +kubebuilder:validation:Optional
	Actions []ActionsParameters `json:"actions,omitempty" tf:"actions,omitempty"`

	// The default value will be [] if nothing is supplied
	// +kubebuilder:validation:Optional
	// +listType=set
	ExcludesPattern []*string `json:"excludesPattern,omitempty" tf:"excludes_pattern,omitempty"`

	// The default value will be [""] if nothing is supplied
	// +kubebuilder:validation:Optional
	// +listType=set
	IncludesPattern []*string `json:"includesPattern,omitempty" tf:"includes_pattern,omitempty"`

	// This can only be 1 value: "artifactory-build-info", and currently, validation of sets/lists is not allowed. Artifactory will reject the request if you change this
	// +kubebuilder:validation:Optional
	// +listType=set
	Repositories []*string `json:"repositories" tf:"repositories,omitempty"`
}

type GroupsInitParameters struct {
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +listType=set
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`
}

type GroupsObservation struct {
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +listType=set
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`
}

type GroupsParameters struct {

	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	// +listType=set
	Permissions []*string `json:"permissions" tf:"permissions,omitempty"`
}

type ReleaseBundleActionsInitParameters struct {
	Groups []ActionsGroupsInitParameters `json:"groups,omitempty" tf:"groups,omitempty"`

	Users []ActionsUsersInitParameters `json:"users,omitempty" tf:"users,omitempty"`
}

type ReleaseBundleActionsObservation struct {
	Groups []ActionsGroupsObservation `json:"groups,omitempty" tf:"groups,omitempty"`

	Users []ActionsUsersObservation `json:"users,omitempty" tf:"users,omitempty"`
}

type ReleaseBundleActionsParameters struct {

	// +kubebuilder:validation:Optional
	Groups []ActionsGroupsParameters `json:"groups,omitempty" tf:"groups,omitempty"`

	// +kubebuilder:validation:Optional
	Users []ActionsUsersParameters `json:"users,omitempty" tf:"users,omitempty"`
}

type ReleaseBundleInitParameters struct {
	Actions []ReleaseBundleActionsInitParameters `json:"actions,omitempty" tf:"actions,omitempty"`

	// The default value will be [] if nothing is supplied
	// +listType=set
	ExcludesPattern []*string `json:"excludesPattern,omitempty" tf:"excludes_pattern,omitempty"`

	// The default value will be [""] if nothing is supplied
	// +listType=set
	IncludesPattern []*string `json:"includesPattern,omitempty" tf:"includes_pattern,omitempty"`

	// This can only be 1 value: "artifactory-build-info", and currently, validation of sets/lists is not allowed. Artifactory will reject the request if you change this
	// +listType=set
	Repositories []*string `json:"repositories,omitempty" tf:"repositories,omitempty"`
}

type ReleaseBundleObservation struct {
	Actions []ReleaseBundleActionsObservation `json:"actions,omitempty" tf:"actions,omitempty"`

	// The default value will be [] if nothing is supplied
	// +listType=set
	ExcludesPattern []*string `json:"excludesPattern,omitempty" tf:"excludes_pattern,omitempty"`

	// The default value will be [""] if nothing is supplied
	// +listType=set
	IncludesPattern []*string `json:"includesPattern,omitempty" tf:"includes_pattern,omitempty"`

	// This can only be 1 value: "artifactory-build-info", and currently, validation of sets/lists is not allowed. Artifactory will reject the request if you change this
	// +listType=set
	Repositories []*string `json:"repositories,omitempty" tf:"repositories,omitempty"`
}

type ReleaseBundleParameters struct {

	// +kubebuilder:validation:Optional
	Actions []ReleaseBundleActionsParameters `json:"actions,omitempty" tf:"actions,omitempty"`

	// The default value will be [] if nothing is supplied
	// +kubebuilder:validation:Optional
	// +listType=set
	ExcludesPattern []*string `json:"excludesPattern,omitempty" tf:"excludes_pattern,omitempty"`

	// The default value will be [""] if nothing is supplied
	// +kubebuilder:validation:Optional
	// +listType=set
	IncludesPattern []*string `json:"includesPattern,omitempty" tf:"includes_pattern,omitempty"`

	// This can only be 1 value: "artifactory-build-info", and currently, validation of sets/lists is not allowed. Artifactory will reject the request if you change this
	// +kubebuilder:validation:Optional
	// +listType=set
	Repositories []*string `json:"repositories" tf:"repositories,omitempty"`
}

type RepoActionsGroupsInitParameters struct {
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +listType=set
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`
}

type RepoActionsGroupsObservation struct {
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +listType=set
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`
}

type RepoActionsGroupsParameters struct {

	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	// +listType=set
	Permissions []*string `json:"permissions" tf:"permissions,omitempty"`
}

type RepoActionsInitParameters struct {
	Groups []RepoActionsGroupsInitParameters `json:"groups,omitempty" tf:"groups,omitempty"`

	Users []RepoActionsUsersInitParameters `json:"users,omitempty" tf:"users,omitempty"`
}

type RepoActionsObservation struct {
	Groups []RepoActionsGroupsObservation `json:"groups,omitempty" tf:"groups,omitempty"`

	Users []RepoActionsUsersObservation `json:"users,omitempty" tf:"users,omitempty"`
}

type RepoActionsParameters struct {

	// +kubebuilder:validation:Optional
	Groups []RepoActionsGroupsParameters `json:"groups,omitempty" tf:"groups,omitempty"`

	// +kubebuilder:validation:Optional
	Users []RepoActionsUsersParameters `json:"users,omitempty" tf:"users,omitempty"`
}

type RepoActionsUsersInitParameters struct {
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +listType=set
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`
}

type RepoActionsUsersObservation struct {
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +listType=set
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`
}

type RepoActionsUsersParameters struct {

	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	// +listType=set
	Permissions []*string `json:"permissions" tf:"permissions,omitempty"`
}

type RepoInitParameters struct {
	Actions []RepoActionsInitParameters `json:"actions,omitempty" tf:"actions,omitempty"`

	// The default value will be [] if nothing is supplied
	// +listType=set
	ExcludesPattern []*string `json:"excludesPattern,omitempty" tf:"excludes_pattern,omitempty"`

	// The default value will be [""] if nothing is supplied
	// +listType=set
	IncludesPattern []*string `json:"includesPattern,omitempty" tf:"includes_pattern,omitempty"`

	// This can only be 1 value: "artifactory-build-info", and currently, validation of sets/lists is not allowed. Artifactory will reject the request if you change this
	// +listType=set
	Repositories []*string `json:"repositories,omitempty" tf:"repositories,omitempty"`
}

type RepoObservation struct {
	Actions []RepoActionsObservation `json:"actions,omitempty" tf:"actions,omitempty"`

	// The default value will be [] if nothing is supplied
	// +listType=set
	ExcludesPattern []*string `json:"excludesPattern,omitempty" tf:"excludes_pattern,omitempty"`

	// The default value will be [""] if nothing is supplied
	// +listType=set
	IncludesPattern []*string `json:"includesPattern,omitempty" tf:"includes_pattern,omitempty"`

	// This can only be 1 value: "artifactory-build-info", and currently, validation of sets/lists is not allowed. Artifactory will reject the request if you change this
	// +listType=set
	Repositories []*string `json:"repositories,omitempty" tf:"repositories,omitempty"`
}

type RepoParameters struct {

	// +kubebuilder:validation:Optional
	Actions []RepoActionsParameters `json:"actions,omitempty" tf:"actions,omitempty"`

	// The default value will be [] if nothing is supplied
	// +kubebuilder:validation:Optional
	// +listType=set
	ExcludesPattern []*string `json:"excludesPattern,omitempty" tf:"excludes_pattern,omitempty"`

	// The default value will be [""] if nothing is supplied
	// +kubebuilder:validation:Optional
	// +listType=set
	IncludesPattern []*string `json:"includesPattern,omitempty" tf:"includes_pattern,omitempty"`

	// This can only be 1 value: "artifactory-build-info", and currently, validation of sets/lists is not allowed. Artifactory will reject the request if you change this
	// +kubebuilder:validation:Optional
	// +listType=set
	Repositories []*string `json:"repositories" tf:"repositories,omitempty"`
}

type TargetInitParameters struct {
	Build []BuildInitParameters `json:"build,omitempty" tf:"build,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	ReleaseBundle []ReleaseBundleInitParameters `json:"releaseBundle,omitempty" tf:"release_bundle,omitempty"`

	Repo []RepoInitParameters `json:"repo,omitempty" tf:"repo,omitempty"`
}

type TargetObservation struct {
	Build []BuildObservation `json:"build,omitempty" tf:"build,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	ReleaseBundle []ReleaseBundleObservation `json:"releaseBundle,omitempty" tf:"release_bundle,omitempty"`

	Repo []RepoObservation `json:"repo,omitempty" tf:"repo,omitempty"`
}

type TargetParameters struct {

	// +kubebuilder:validation:Optional
	Build []BuildParameters `json:"build,omitempty" tf:"build,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	ReleaseBundle []ReleaseBundleParameters `json:"releaseBundle,omitempty" tf:"release_bundle,omitempty"`

	// +kubebuilder:validation:Optional
	Repo []RepoParameters `json:"repo,omitempty" tf:"repo,omitempty"`
}

type UsersInitParameters struct {
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +listType=set
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`
}

type UsersObservation struct {
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +listType=set
	Permissions []*string `json:"permissions,omitempty" tf:"permissions,omitempty"`
}

type UsersParameters struct {

	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	// +listType=set
	Permissions []*string `json:"permissions" tf:"permissions,omitempty"`
}

// TargetSpec defines the desired state of Target
type TargetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TargetParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TargetInitParameters `json:"initProvider,omitempty"`
}

// TargetStatus defines the observed state of Target.
type TargetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TargetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Target is the Schema for the Targets API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,artifactory}
type Target struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   TargetSpec   `json:"spec"`
	Status TargetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TargetList contains a list of Targets
type TargetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Target `json:"items"`
}

// Repository type metadata.
var (
	Target_Kind             = "Target"
	Target_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Target_Kind}.String()
	Target_KindAPIVersion   = Target_Kind + "." + CRDGroupVersion.String()
	Target_GroupVersionKind = CRDGroupVersion.WithKind(Target_Kind)
)

func init() {
	SchemeBuilder.Register(&Target{}, &TargetList{})
}
