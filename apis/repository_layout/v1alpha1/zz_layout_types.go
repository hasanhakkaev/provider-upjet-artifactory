// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LayoutInitParameters struct {

	// Please refer to: Path Patterns in the Artifactory Wiki documentation.
	// Please refer to: [Path Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-ModulesandPathPatternsusedbyRepositoryLayouts) in the Artifactory Wiki documentation.
	ArtifactPathPattern *string `json:"artifactPathPattern,omitempty" tf:"artifact_path_pattern,omitempty"`

	// Please refer to: Descriptor Path Patterns in the Artifactory Wiki documentation.
	// Please refer to: [Descriptor Path Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-DescriptorPathPatterns) in the Artifactory Wiki documentation.
	DescriptorPathPattern *string `json:"descriptorPathPattern,omitempty" tf:"descriptor_path_pattern,omitempty"`

	// When set, descriptor_path_pattern will be used. Default to false.
	// When set, 'descriptor_path_pattern' will be used. Default to 'false'.
	DistinctiveDescriptorPathPattern *bool `json:"distinctiveDescriptorPathPattern,omitempty" tf:"distinctive_descriptor_path_pattern,omitempty"`

	// A regular expression matching the integration revision string appearing in a file name as part of the artifact's path. For example, SNAPSHOT|(?:(?:[0-9]{8}.[0-9]{6})-(?:[0-9]+)), in Maven. Note! Take care not to introduce any regexp capturing groups within this expression. If not applicable use .*
	// A regular expression matching the integration revision string appearing in a file name as part of the artifact's path. For example, 'SNAPSHOT|(?:(?:[0-9]{8}.[0-9]{6})-(?:[0-9]+))', in Maven. Note! Take care not to introduce any regexp capturing groups within this expression. If not applicable use '.*'
	FileIntegrationRevisionRegexp *string `json:"fileIntegrationRevisionRegexp,omitempty" tf:"file_integration_revision_regexp,omitempty"`

	// A regular expression matching the integration revision string appearing in a folder name as part of the artifact's path. For example, SNAPSHOT, in Maven. Note! Take care not to introduce any regexp capturing groups within this expression. If not applicable use .*
	// A regular expression matching the integration revision string appearing in a folder name as part of the artifact's path. For example, 'SNAPSHOT', in Maven. Note! Take care not to introduce any regexp capturing groups within this expression. If not applicable use '.*'
	FolderIntegrationRevisionRegexp *string `json:"folderIntegrationRevisionRegexp,omitempty" tf:"folder_integration_revision_regexp,omitempty"`

	// Layout name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type LayoutObservation struct {

	// Please refer to: Path Patterns in the Artifactory Wiki documentation.
	// Please refer to: [Path Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-ModulesandPathPatternsusedbyRepositoryLayouts) in the Artifactory Wiki documentation.
	ArtifactPathPattern *string `json:"artifactPathPattern,omitempty" tf:"artifact_path_pattern,omitempty"`

	// Please refer to: Descriptor Path Patterns in the Artifactory Wiki documentation.
	// Please refer to: [Descriptor Path Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-DescriptorPathPatterns) in the Artifactory Wiki documentation.
	DescriptorPathPattern *string `json:"descriptorPathPattern,omitempty" tf:"descriptor_path_pattern,omitempty"`

	// When set, descriptor_path_pattern will be used. Default to false.
	// When set, 'descriptor_path_pattern' will be used. Default to 'false'.
	DistinctiveDescriptorPathPattern *bool `json:"distinctiveDescriptorPathPattern,omitempty" tf:"distinctive_descriptor_path_pattern,omitempty"`

	// A regular expression matching the integration revision string appearing in a file name as part of the artifact's path. For example, SNAPSHOT|(?:(?:[0-9]{8}.[0-9]{6})-(?:[0-9]+)), in Maven. Note! Take care not to introduce any regexp capturing groups within this expression. If not applicable use .*
	// A regular expression matching the integration revision string appearing in a file name as part of the artifact's path. For example, 'SNAPSHOT|(?:(?:[0-9]{8}.[0-9]{6})-(?:[0-9]+))', in Maven. Note! Take care not to introduce any regexp capturing groups within this expression. If not applicable use '.*'
	FileIntegrationRevisionRegexp *string `json:"fileIntegrationRevisionRegexp,omitempty" tf:"file_integration_revision_regexp,omitempty"`

	// A regular expression matching the integration revision string appearing in a folder name as part of the artifact's path. For example, SNAPSHOT, in Maven. Note! Take care not to introduce any regexp capturing groups within this expression. If not applicable use .*
	// A regular expression matching the integration revision string appearing in a folder name as part of the artifact's path. For example, 'SNAPSHOT', in Maven. Note! Take care not to introduce any regexp capturing groups within this expression. If not applicable use '.*'
	FolderIntegrationRevisionRegexp *string `json:"folderIntegrationRevisionRegexp,omitempty" tf:"folder_integration_revision_regexp,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Layout name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type LayoutParameters struct {

	// Please refer to: Path Patterns in the Artifactory Wiki documentation.
	// Please refer to: [Path Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-ModulesandPathPatternsusedbyRepositoryLayouts) in the Artifactory Wiki documentation.
	// +kubebuilder:validation:Optional
	ArtifactPathPattern *string `json:"artifactPathPattern,omitempty" tf:"artifact_path_pattern,omitempty"`

	// Please refer to: Descriptor Path Patterns in the Artifactory Wiki documentation.
	// Please refer to: [Descriptor Path Patterns](https://www.jfrog.com/confluence/display/JFROG/Repository+Layouts#RepositoryLayouts-DescriptorPathPatterns) in the Artifactory Wiki documentation.
	// +kubebuilder:validation:Optional
	DescriptorPathPattern *string `json:"descriptorPathPattern,omitempty" tf:"descriptor_path_pattern,omitempty"`

	// When set, descriptor_path_pattern will be used. Default to false.
	// When set, 'descriptor_path_pattern' will be used. Default to 'false'.
	// +kubebuilder:validation:Optional
	DistinctiveDescriptorPathPattern *bool `json:"distinctiveDescriptorPathPattern,omitempty" tf:"distinctive_descriptor_path_pattern,omitempty"`

	// A regular expression matching the integration revision string appearing in a file name as part of the artifact's path. For example, SNAPSHOT|(?:(?:[0-9]{8}.[0-9]{6})-(?:[0-9]+)), in Maven. Note! Take care not to introduce any regexp capturing groups within this expression. If not applicable use .*
	// A regular expression matching the integration revision string appearing in a file name as part of the artifact's path. For example, 'SNAPSHOT|(?:(?:[0-9]{8}.[0-9]{6})-(?:[0-9]+))', in Maven. Note! Take care not to introduce any regexp capturing groups within this expression. If not applicable use '.*'
	// +kubebuilder:validation:Optional
	FileIntegrationRevisionRegexp *string `json:"fileIntegrationRevisionRegexp,omitempty" tf:"file_integration_revision_regexp,omitempty"`

	// A regular expression matching the integration revision string appearing in a folder name as part of the artifact's path. For example, SNAPSHOT, in Maven. Note! Take care not to introduce any regexp capturing groups within this expression. If not applicable use .*
	// A regular expression matching the integration revision string appearing in a folder name as part of the artifact's path. For example, 'SNAPSHOT', in Maven. Note! Take care not to introduce any regexp capturing groups within this expression. If not applicable use '.*'
	// +kubebuilder:validation:Optional
	FolderIntegrationRevisionRegexp *string `json:"folderIntegrationRevisionRegexp,omitempty" tf:"folder_integration_revision_regexp,omitempty"`

	// Layout name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

// LayoutSpec defines the desired state of Layout
type LayoutSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LayoutParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider LayoutInitParameters `json:"initProvider,omitempty"`
}

// LayoutStatus defines the observed state of Layout.
type LayoutStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LayoutObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Layout is the Schema for the Layouts API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,artifactory}
type Layout struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.artifactPathPattern) || (has(self.initProvider) && has(self.initProvider.artifactPathPattern))",message="spec.forProvider.artifactPathPattern is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.fileIntegrationRevisionRegexp) || (has(self.initProvider) && has(self.initProvider.fileIntegrationRevisionRegexp))",message="spec.forProvider.fileIntegrationRevisionRegexp is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.folderIntegrationRevisionRegexp) || (has(self.initProvider) && has(self.initProvider.folderIntegrationRevisionRegexp))",message="spec.forProvider.folderIntegrationRevisionRegexp is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   LayoutSpec   `json:"spec"`
	Status LayoutStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LayoutList contains a list of Layouts
type LayoutList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Layout `json:"items"`
}

// Repository type metadata.
var (
	Layout_Kind             = "Layout"
	Layout_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Layout_Kind}.String()
	Layout_KindAPIVersion   = Layout_Kind + "." + CRDGroupVersion.String()
	Layout_GroupVersionKind = CRDGroupVersion.WithKind(Layout_Kind)
)

func init() {
	SchemeBuilder.Register(&Layout{}, &LayoutList{})
}
