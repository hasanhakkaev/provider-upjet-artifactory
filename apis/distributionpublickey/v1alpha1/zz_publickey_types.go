// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PublicKeyInitParameters struct {

	// Will be used as an identifier when uploading/retrieving the public key via REST API.
	// Will be used as an identifier when uploading/retrieving the public key via REST API.
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// The Public key to add as a trusted distribution GPG key.
	// The Public key to add as a trusted distribution GPG key. To avoid state drift, ensure there are no leading tab or space characters for each line.
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`
}

type PublicKeyObservation struct {

	// Will be used as an identifier when uploading/retrieving the public key via REST API.
	// Will be used as an identifier when uploading/retrieving the public key via REST API.
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// Returns the computed key fingerprint
	// Returns the computed key fingerprint
	Fingerprint *string `json:"fingerprint,omitempty" tf:"fingerprint,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Returns the name and eMail address of issuer
	// Returns the name and eMail address of issuer.
	IssuedBy *string `json:"issuedBy,omitempty" tf:"issued_by,omitempty"`

	// Returns the date/time when this GPG key was created
	// Returns the date/time when this GPG key was created.
	IssuedOn *string `json:"issuedOn,omitempty" tf:"issued_on,omitempty"`

	// Returns the key id by which this key is referenced in Artifactory
	// Returns the key id by which this key is referenced in Artifactory.
	KeyID *string `json:"keyId,omitempty" tf:"key_id,omitempty"`

	// The Public key to add as a trusted distribution GPG key.
	// The Public key to add as a trusted distribution GPG key. To avoid state drift, ensure there are no leading tab or space characters for each line.
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`

	// Returns the date/time when this GPG key expires.
	// Returns the date/time when this GPG key expires.
	ValidUntil *string `json:"validUntil,omitempty" tf:"valid_until,omitempty"`
}

type PublicKeyParameters struct {

	// Will be used as an identifier when uploading/retrieving the public key via REST API.
	// Will be used as an identifier when uploading/retrieving the public key via REST API.
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// The Public key to add as a trusted distribution GPG key.
	// The Public key to add as a trusted distribution GPG key. To avoid state drift, ensure there are no leading tab or space characters for each line.
	// +kubebuilder:validation:Optional
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`
}

// PublicKeySpec defines the desired state of PublicKey
type PublicKeySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PublicKeyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PublicKeyInitParameters `json:"initProvider,omitempty"`
}

// PublicKeyStatus defines the observed state of PublicKey.
type PublicKeyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PublicKeyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// PublicKey is the Schema for the PublicKeys API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,artifactory}
type PublicKey struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.alias) || (has(self.initProvider) && has(self.initProvider.alias))",message="spec.forProvider.alias is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.publicKey) || (has(self.initProvider) && has(self.initProvider.publicKey))",message="spec.forProvider.publicKey is a required parameter"
	Spec   PublicKeySpec   `json:"spec"`
	Status PublicKeyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PublicKeyList contains a list of PublicKeys
type PublicKeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PublicKey `json:"items"`
}

// Repository type metadata.
var (
	PublicKey_Kind             = "PublicKey"
	PublicKey_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PublicKey_Kind}.String()
	PublicKey_KindAPIVersion   = PublicKey_Kind + "." + CRDGroupVersion.String()
	PublicKey_GroupVersionKind = CRDGroupVersion.WithKind(PublicKey_Kind)
)

func init() {
	SchemeBuilder.Register(&PublicKey{}, &PublicKeyList{})
}
