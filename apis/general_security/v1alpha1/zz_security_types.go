// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecurityInitParameters struct {

	// Enable anonymous access.  Default value is false.
	EnableAnonymousAccess *bool `json:"enableAnonymousAccess,omitempty" tf:"enable_anonymous_access,omitempty"`
}

type SecurityObservation struct {

	// Enable anonymous access.  Default value is false.
	EnableAnonymousAccess *bool `json:"enableAnonymousAccess,omitempty" tf:"enable_anonymous_access,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SecurityParameters struct {

	// Enable anonymous access.  Default value is false.
	// +kubebuilder:validation:Optional
	EnableAnonymousAccess *bool `json:"enableAnonymousAccess,omitempty" tf:"enable_anonymous_access,omitempty"`
}

// SecuritySpec defines the desired state of Security
type SecuritySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecurityParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SecurityInitParameters `json:"initProvider,omitempty"`
}

// SecurityStatus defines the observed state of Security.
type SecurityStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecurityObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Security is the Schema for the Securitys API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,artifactory}
type Security struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SecuritySpec   `json:"spec"`
	Status            SecurityStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityList contains a list of Securitys
type SecurityList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Security `json:"items"`
}

// Repository type metadata.
var (
	Security_Kind             = "Security"
	Security_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Security_Kind}.String()
	Security_KindAPIVersion   = Security_Kind + "." + CRDGroupVersion.String()
	Security_GroupVersionKind = CRDGroupVersion.WithKind(Security_Kind)
)

func init() {
	SchemeBuilder.Register(&Security{}, &SecurityList{})
}
