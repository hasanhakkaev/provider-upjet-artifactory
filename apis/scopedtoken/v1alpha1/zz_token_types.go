// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TokenInitParameters struct {

	// IDs. Limited to total 255 characters. Default to '@' if not set. Service ID must begin with valid JFrog service type. Options: jfrt, jfxr, jfpip, jfds, jfmc, jfac, jfevt, jfmd, jfcon, or *. For instructions to retrieve the Artifactory Service ID see this documentation
	// A list of the other instances or services that should accept this token identified by their Service-IDs. Limited to total 255 characters. Default to '*@*' if not set. Service ID must begin with valid JFrog service type. Options: jfrt, jfxr, jfpip, jfds, jfmc, jfac, jfevt, jfmd, jfcon, or *. For instructions to retrieve the Artifactory Service ID see this [documentation](https://jfrog.com/help/r/jfrog-rest-apis/get-service-id)
	// +listType=set
	Audiences []*string `json:"audiences,omitempty" tf:"audiences,omitempty"`

	// (String) Free text token description. Useful for filtering and managing tokens. Limited to 1024 characters.
	// Free text token description. Useful for filtering and managing tokens. Limited to 1024 characters.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// negative. Default value is based on configuration in 'access.config.yaml'. See API documentation for details. Access Token would not be saved by Artifactory if this is less than the persistence threshold value (default to 10800 seconds) set in Access configuration. See official documentation for details.
	// The amount of time, in seconds, it would take for the token to expire. An admin shall be able to set whether expiry is mandatory, what is the default expiry, and what is the maximum expiry allowed. Must be non-negative. Default value is based on configuration in 'access.config.yaml'. See [API documentation](https://jfrog.com/help/r/jfrog-rest-apis/revoke-token-by-id) for details. Access Token would not be saved by Artifactory if this is less than the persistence threshold value (default to 10800 seconds) set in Access configuration. See [official documentation](https://jfrog.com/help/r/jfrog-platform-administration-documentation/using-the-revocable-and-persistency-thresholds) for details.
	ExpiresIn *float64 `json:"expiresIn,omitempty" tf:"expires_in,omitempty"`

	// (String) The grant type used to authenticate the request. In this case, the only value supported is client_credentials which is also the default value if this parameter is not specified.
	// The grant type used to authenticate the request. In this case, the only value supported is `client_credentials` which is also the default value if this parameter is not specified.
	GrantType *string `json:"grantType,omitempty" tf:"grant_type,omitempty"`

	// (Boolean) Also create a reference token which can be used like an API key. Default is false.
	// Also create a reference token which can be used like an API key. Default is `false`.
	IncludeReferenceToken *bool `json:"includeReferenceToken,omitempty" tf:"include_reference_token,omitempty"`

	// (String) The project for which this token is created. Enter the project name on which you want to apply this token.
	// The project for which this token is created. Enter the project name on which you want to apply this token.
	ProjectKey *string `json:"projectKey,omitempty" tf:"project_key,omitempty"`

	// (Boolean) Is this token refreshable? Default is false.
	// Is this token refreshable? Default is `false`.
	Refreshable *bool `json:"refreshable,omitempty" tf:"refreshable,omitempty"`

	// admin users can only set the scope to a subset of the groups to which they belong. The supported scopes include:
	// The scope of access that the token provides. Access to the REST API is always provided by default. Administrators can set any scope, while non-admin users can only set the scope to a subset of the groups to which they belong.
	// The supported scopes include:
	// * `applied-permissions/user` - provides user access. If left at the default setting, the token will be created with the user-identity scope, which allows users to identify themselves in the Platform but does not grant any specific access permissions.* `applied-permissions/admin` - the scope assigned to admin users.* `applied-permissions/groups` - the group to which permissions are assigned by group name (use username to inicate the group name)* `system:metrics:r` - for getting the service metrics* `system:livelogs:r` - for getting the service livelogsrThe scope to assign to the token should be provided as a list of scope tokens, limited to 500 characters in total.
	// Resource Permissions
	// From Artifactory 7.38.x, resource permissions scoped tokens are also supported in the REST API. A permission can be represented as a scope token string in the following format:
	// `<resource-type>:<target>[/<sub-resource>]:<actions>`
	// Where:
	// `<resource-type>` - one of the permission resource types, from a predefined closed list. Currently, the only resource type that is supported is the artifact resource type.
	// `<target>` - the target resource, can be exact name or a pattern `<sub-resource>` - optional, the target sub-resource, can be exact name or a pattern `<actions>` - comma-separated list of action acronyms.The actions allowed are <r, w, d, a, m> or any combination of these actions
	// .To allow all actions - use `*`
	// Examples:  `["applied-permissions/user", "artifact:generic-local:r"]`
	// `["applied-permissions/group", "artifact:generic-local/path:*"]`
	// `["applied-permissions/admin", "system:metrics:r", "artifact:generic-local:*"]`
	// +listType=set
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// either from the user of the authenticated token or based on the username (if basic auth was used). The username is then used to set the subject of the token: /users/. Limited to 255 characters.
	// The user name for which this token is created. The username is based on the authenticated user - either from the user of the authenticated token or based on the username (if basic auth was used). The username is then used to set the subject of the token: <service-id>/users/<username>. Limited to 255 characters.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type TokenObservation struct {

	// IDs. Limited to total 255 characters. Default to '@' if not set. Service ID must begin with valid JFrog service type. Options: jfrt, jfxr, jfpip, jfds, jfmc, jfac, jfevt, jfmd, jfcon, or *. For instructions to retrieve the Artifactory Service ID see this documentation
	// A list of the other instances or services that should accept this token identified by their Service-IDs. Limited to total 255 characters. Default to '*@*' if not set. Service ID must begin with valid JFrog service type. Options: jfrt, jfxr, jfpip, jfds, jfmc, jfac, jfevt, jfmd, jfcon, or *. For instructions to retrieve the Artifactory Service ID see this [documentation](https://jfrog.com/help/r/jfrog-rest-apis/get-service-id)
	// +listType=set
	Audiences []*string `json:"audiences,omitempty" tf:"audiences,omitempty"`

	// (String) Free text token description. Useful for filtering and managing tokens. Limited to 1024 characters.
	// Free text token description. Useful for filtering and managing tokens. Limited to 1024 characters.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// negative. Default value is based on configuration in 'access.config.yaml'. See API documentation for details. Access Token would not be saved by Artifactory if this is less than the persistence threshold value (default to 10800 seconds) set in Access configuration. See official documentation for details.
	// The amount of time, in seconds, it would take for the token to expire. An admin shall be able to set whether expiry is mandatory, what is the default expiry, and what is the maximum expiry allowed. Must be non-negative. Default value is based on configuration in 'access.config.yaml'. See [API documentation](https://jfrog.com/help/r/jfrog-rest-apis/revoke-token-by-id) for details. Access Token would not be saved by Artifactory if this is less than the persistence threshold value (default to 10800 seconds) set in Access configuration. See [official documentation](https://jfrog.com/help/r/jfrog-platform-administration-documentation/using-the-revocable-and-persistency-thresholds) for details.
	ExpiresIn *float64 `json:"expiresIn,omitempty" tf:"expires_in,omitempty"`

	// (Number) Returns the token expiry.
	// Returns the token expiry.
	Expiry *float64 `json:"expiry,omitempty" tf:"expiry,omitempty"`

	// (String) The grant type used to authenticate the request. In this case, the only value supported is client_credentials which is also the default value if this parameter is not specified.
	// The grant type used to authenticate the request. In this case, the only value supported is `client_credentials` which is also the default value if this parameter is not specified.
	GrantType *string `json:"grantType,omitempty" tf:"grant_type,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean) Also create a reference token which can be used like an API key. Default is false.
	// Also create a reference token which can be used like an API key. Default is `false`.
	IncludeReferenceToken *bool `json:"includeReferenceToken,omitempty" tf:"include_reference_token,omitempty"`

	// (Number) Returns the token issued at date/time.
	// Returns the token issued at date/time.
	IssuedAt *float64 `json:"issuedAt,omitempty" tf:"issued_at,omitempty"`

	// (String) Returns the token issuer.
	// Returns the token issuer.
	Issuer *string `json:"issuer,omitempty" tf:"issuer,omitempty"`

	// (String) The project for which this token is created. Enter the project name on which you want to apply this token.
	// The project for which this token is created. Enter the project name on which you want to apply this token.
	ProjectKey *string `json:"projectKey,omitempty" tf:"project_key,omitempty"`

	// (Boolean) Is this token refreshable? Default is false.
	// Is this token refreshable? Default is `false`.
	Refreshable *bool `json:"refreshable,omitempty" tf:"refreshable,omitempty"`

	// admin users can only set the scope to a subset of the groups to which they belong. The supported scopes include:
	// The scope of access that the token provides. Access to the REST API is always provided by default. Administrators can set any scope, while non-admin users can only set the scope to a subset of the groups to which they belong.
	// The supported scopes include:
	// * `applied-permissions/user` - provides user access. If left at the default setting, the token will be created with the user-identity scope, which allows users to identify themselves in the Platform but does not grant any specific access permissions.* `applied-permissions/admin` - the scope assigned to admin users.* `applied-permissions/groups` - the group to which permissions are assigned by group name (use username to inicate the group name)* `system:metrics:r` - for getting the service metrics* `system:livelogs:r` - for getting the service livelogsrThe scope to assign to the token should be provided as a list of scope tokens, limited to 500 characters in total.
	// Resource Permissions
	// From Artifactory 7.38.x, resource permissions scoped tokens are also supported in the REST API. A permission can be represented as a scope token string in the following format:
	// `<resource-type>:<target>[/<sub-resource>]:<actions>`
	// Where:
	// `<resource-type>` - one of the permission resource types, from a predefined closed list. Currently, the only resource type that is supported is the artifact resource type.
	// `<target>` - the target resource, can be exact name or a pattern `<sub-resource>` - optional, the target sub-resource, can be exact name or a pattern `<actions>` - comma-separated list of action acronyms.The actions allowed are <r, w, d, a, m> or any combination of these actions
	// .To allow all actions - use `*`
	// Examples:  `["applied-permissions/user", "artifact:generic-local:r"]`
	// `["applied-permissions/group", "artifact:generic-local/path:*"]`
	// `["applied-permissions/admin", "system:metrics:r", "artifact:generic-local:*"]`
	// +listType=set
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// (String) Returns the token type.
	// Returns the token type.
	Subject *string `json:"subject,omitempty" tf:"subject,omitempty"`

	// (String) Returns the token type.
	// Returns the token type.
	TokenType *string `json:"tokenType,omitempty" tf:"token_type,omitempty"`

	// either from the user of the authenticated token or based on the username (if basic auth was used). The username is then used to set the subject of the token: /users/. Limited to 255 characters.
	// The user name for which this token is created. The username is based on the authenticated user - either from the user of the authenticated token or based on the username (if basic auth was used). The username is then used to set the subject of the token: <service-id>/users/<username>. Limited to 255 characters.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type TokenParameters struct {

	// IDs. Limited to total 255 characters. Default to '@' if not set. Service ID must begin with valid JFrog service type. Options: jfrt, jfxr, jfpip, jfds, jfmc, jfac, jfevt, jfmd, jfcon, or *. For instructions to retrieve the Artifactory Service ID see this documentation
	// A list of the other instances or services that should accept this token identified by their Service-IDs. Limited to total 255 characters. Default to '*@*' if not set. Service ID must begin with valid JFrog service type. Options: jfrt, jfxr, jfpip, jfds, jfmc, jfac, jfevt, jfmd, jfcon, or *. For instructions to retrieve the Artifactory Service ID see this [documentation](https://jfrog.com/help/r/jfrog-rest-apis/get-service-id)
	// +kubebuilder:validation:Optional
	// +listType=set
	Audiences []*string `json:"audiences,omitempty" tf:"audiences,omitempty"`

	// (String) Free text token description. Useful for filtering and managing tokens. Limited to 1024 characters.
	// Free text token description. Useful for filtering and managing tokens. Limited to 1024 characters.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// negative. Default value is based on configuration in 'access.config.yaml'. See API documentation for details. Access Token would not be saved by Artifactory if this is less than the persistence threshold value (default to 10800 seconds) set in Access configuration. See official documentation for details.
	// The amount of time, in seconds, it would take for the token to expire. An admin shall be able to set whether expiry is mandatory, what is the default expiry, and what is the maximum expiry allowed. Must be non-negative. Default value is based on configuration in 'access.config.yaml'. See [API documentation](https://jfrog.com/help/r/jfrog-rest-apis/revoke-token-by-id) for details. Access Token would not be saved by Artifactory if this is less than the persistence threshold value (default to 10800 seconds) set in Access configuration. See [official documentation](https://jfrog.com/help/r/jfrog-platform-administration-documentation/using-the-revocable-and-persistency-thresholds) for details.
	// +kubebuilder:validation:Optional
	ExpiresIn *float64 `json:"expiresIn,omitempty" tf:"expires_in,omitempty"`

	// (String) The grant type used to authenticate the request. In this case, the only value supported is client_credentials which is also the default value if this parameter is not specified.
	// The grant type used to authenticate the request. In this case, the only value supported is `client_credentials` which is also the default value if this parameter is not specified.
	// +kubebuilder:validation:Optional
	GrantType *string `json:"grantType,omitempty" tf:"grant_type,omitempty"`

	// (Boolean) Also create a reference token which can be used like an API key. Default is false.
	// Also create a reference token which can be used like an API key. Default is `false`.
	// +kubebuilder:validation:Optional
	IncludeReferenceToken *bool `json:"includeReferenceToken,omitempty" tf:"include_reference_token,omitempty"`

	// (String) The project for which this token is created. Enter the project name on which you want to apply this token.
	// The project for which this token is created. Enter the project name on which you want to apply this token.
	// +kubebuilder:validation:Optional
	ProjectKey *string `json:"projectKey,omitempty" tf:"project_key,omitempty"`

	// (Boolean) Is this token refreshable? Default is false.
	// Is this token refreshable? Default is `false`.
	// +kubebuilder:validation:Optional
	Refreshable *bool `json:"refreshable,omitempty" tf:"refreshable,omitempty"`

	// admin users can only set the scope to a subset of the groups to which they belong. The supported scopes include:
	// The scope of access that the token provides. Access to the REST API is always provided by default. Administrators can set any scope, while non-admin users can only set the scope to a subset of the groups to which they belong.
	// The supported scopes include:
	// * `applied-permissions/user` - provides user access. If left at the default setting, the token will be created with the user-identity scope, which allows users to identify themselves in the Platform but does not grant any specific access permissions.* `applied-permissions/admin` - the scope assigned to admin users.* `applied-permissions/groups` - the group to which permissions are assigned by group name (use username to inicate the group name)* `system:metrics:r` - for getting the service metrics* `system:livelogs:r` - for getting the service livelogsrThe scope to assign to the token should be provided as a list of scope tokens, limited to 500 characters in total.
	// Resource Permissions
	// From Artifactory 7.38.x, resource permissions scoped tokens are also supported in the REST API. A permission can be represented as a scope token string in the following format:
	// `<resource-type>:<target>[/<sub-resource>]:<actions>`
	// Where:
	// `<resource-type>` - one of the permission resource types, from a predefined closed list. Currently, the only resource type that is supported is the artifact resource type.
	// `<target>` - the target resource, can be exact name or a pattern `<sub-resource>` - optional, the target sub-resource, can be exact name or a pattern `<actions>` - comma-separated list of action acronyms.The actions allowed are <r, w, d, a, m> or any combination of these actions
	// .To allow all actions - use `*`
	// Examples:  `["applied-permissions/user", "artifact:generic-local:r"]`
	// `["applied-permissions/group", "artifact:generic-local/path:*"]`
	// `["applied-permissions/admin", "system:metrics:r", "artifact:generic-local:*"]`
	// +kubebuilder:validation:Optional
	// +listType=set
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`

	// either from the user of the authenticated token or based on the username (if basic auth was used). The username is then used to set the subject of the token: /users/. Limited to 255 characters.
	// The user name for which this token is created. The username is based on the authenticated user - either from the user of the authenticated token or based on the username (if basic auth was used). The username is then used to set the subject of the token: <service-id>/users/<username>. Limited to 255 characters.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

// TokenSpec defines the desired state of Token
type TokenSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TokenParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TokenInitParameters `json:"initProvider,omitempty"`
}

// TokenStatus defines the observed state of Token.
type TokenStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TokenObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Token is the Schema for the Tokens API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,artifactory}
type Token struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TokenSpec   `json:"spec"`
	Status            TokenStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TokenList contains a list of Tokens
type TokenList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Token `json:"items"`
}

// Repository type metadata.
var (
	Token_Kind             = "Token"
	Token_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Token_Kind}.String()
	Token_KindAPIVersion   = Token_Kind + "." + CRDGroupVersion.String()
	Token_GroupVersionKind = CRDGroupVersion.WithKind(Token_Kind)
)

func init() {
	SchemeBuilder.Register(&Token{}, &TokenList{})
}
