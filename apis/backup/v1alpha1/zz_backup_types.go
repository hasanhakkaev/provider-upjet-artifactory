// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BackupInitParameters struct {

	// If set, backups will be created within a Zip archive (Slow and CPU intensive). Default value is false.
	// If set to true, backups will be created within a Zip archive (Slow and CPU intensive). Default value is `false`
	CreateArchive *bool `json:"createArchive,omitempty" tf:"create_archive,omitempty"`

	// A valid CRON expression that you can use to control backup frequency. Eg: "0 0 12 * * ? *", "0 0 2 ? * MON-SAT *". Note: please use 7 character format - Seconds, Minutes Hours, Day Of Month, Month, Day Of Week, Year. Also, specifying both a day-of-week AND a day-of-month parameter is not supported. One of them should be replaced by ?. Incorrect: * 5,7,9 14/2 * * WED,SAT *, correct: * 5,7,9 14/2 ? * WED,SAT *. See details in Cron Trigger Tutorial and in Cronexp package readme.
	// Cron expression to control the backup frequency.
	CronExp *string `json:"cronExp,omitempty" tf:"cron_exp,omitempty"`

	// Flag to enable or disable the backup config. Default value is true.
	// Flag to enable or disable the backup config. Default value is `true`.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// When set, new repositories will not be automatically added to the backup. Default value is false.
	// When set to true, new repositories will not be automatically added to the backup. Default value is `false`.
	ExcludeNewRepositories *bool `json:"excludeNewRepositories,omitempty" tf:"exclude_new_repositories,omitempty"`

	// A list of excluded repositories from the backup. Default is empty list.
	// List of excluded repositories from the backup. Default is empty list.
	ExcludedRepositories []*string `json:"excludedRepositories,omitempty" tf:"excluded_repositories,omitempty"`

	// When set to true, mission control will not be automatically added to the backup. Default value is false.
	// When set to true, mission control will not be automatically added to the backup. Default value is `false`.
	ExportMissionControl *bool `json:"exportMissionControl,omitempty" tf:"export_mission_control,omitempty"`

	// The unique ID of the artifactory backup config.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The number of hours to keep a backup before Artifactory will clean it up to free up disk space. Applicable only to non-incremental backups. Default value is 168 hours ie: 7 days.
	// The number of hours to keep a backup before Artifactory will clean it up to free up disk space. Applicable only to non-incremental backups. Default value is 168 hours i.e. 7 days.
	RetentionPeriodHours *float64 `json:"retentionPeriodHours,omitempty" tf:"retention_period_hours,omitempty"`

	// If set, all Artifactory administrators will be notified by email if any problem is encountered during backup. Default value is true.
	// If set to true, all Artifactory administrators will be notified by email if any problem is encountered during backup. Default value is `true`.
	SendMailOnError *bool `json:"sendMailOnError,omitempty" tf:"send_mail_on_error,omitempty"`

	// If set, Artifactory will verify that the backup target location has enough disk space available to hold the backed up data. If there is not enough space available, Artifactory will abort the backup and write a message in the log file. Applicable only to non-incremental backups.
	// If set, Artifactory will verify that the backup target location has enough disk space available to hold the backed up data. If there is not enough space available, Artifactory will abort the backup and write a message in the log file. Applicable only to non-incremental backups. Default value is `false`.
	VerifyDiskSpace *bool `json:"verifyDiskSpace,omitempty" tf:"verify_disk_space,omitempty"`
}

type BackupObservation struct {

	// If set, backups will be created within a Zip archive (Slow and CPU intensive). Default value is false.
	// If set to true, backups will be created within a Zip archive (Slow and CPU intensive). Default value is `false`
	CreateArchive *bool `json:"createArchive,omitempty" tf:"create_archive,omitempty"`

	// A valid CRON expression that you can use to control backup frequency. Eg: "0 0 12 * * ? *", "0 0 2 ? * MON-SAT *". Note: please use 7 character format - Seconds, Minutes Hours, Day Of Month, Month, Day Of Week, Year. Also, specifying both a day-of-week AND a day-of-month parameter is not supported. One of them should be replaced by ?. Incorrect: * 5,7,9 14/2 * * WED,SAT *, correct: * 5,7,9 14/2 ? * WED,SAT *. See details in Cron Trigger Tutorial and in Cronexp package readme.
	// Cron expression to control the backup frequency.
	CronExp *string `json:"cronExp,omitempty" tf:"cron_exp,omitempty"`

	// Flag to enable or disable the backup config. Default value is true.
	// Flag to enable or disable the backup config. Default value is `true`.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// When set, new repositories will not be automatically added to the backup. Default value is false.
	// When set to true, new repositories will not be automatically added to the backup. Default value is `false`.
	ExcludeNewRepositories *bool `json:"excludeNewRepositories,omitempty" tf:"exclude_new_repositories,omitempty"`

	// A list of excluded repositories from the backup. Default is empty list.
	// List of excluded repositories from the backup. Default is empty list.
	ExcludedRepositories []*string `json:"excludedRepositories,omitempty" tf:"excluded_repositories,omitempty"`

	// When set to true, mission control will not be automatically added to the backup. Default value is false.
	// When set to true, mission control will not be automatically added to the backup. Default value is `false`.
	ExportMissionControl *bool `json:"exportMissionControl,omitempty" tf:"export_mission_control,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The unique ID of the artifactory backup config.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The number of hours to keep a backup before Artifactory will clean it up to free up disk space. Applicable only to non-incremental backups. Default value is 168 hours ie: 7 days.
	// The number of hours to keep a backup before Artifactory will clean it up to free up disk space. Applicable only to non-incremental backups. Default value is 168 hours i.e. 7 days.
	RetentionPeriodHours *float64 `json:"retentionPeriodHours,omitempty" tf:"retention_period_hours,omitempty"`

	// If set, all Artifactory administrators will be notified by email if any problem is encountered during backup. Default value is true.
	// If set to true, all Artifactory administrators will be notified by email if any problem is encountered during backup. Default value is `true`.
	SendMailOnError *bool `json:"sendMailOnError,omitempty" tf:"send_mail_on_error,omitempty"`

	// If set, Artifactory will verify that the backup target location has enough disk space available to hold the backed up data. If there is not enough space available, Artifactory will abort the backup and write a message in the log file. Applicable only to non-incremental backups.
	// If set, Artifactory will verify that the backup target location has enough disk space available to hold the backed up data. If there is not enough space available, Artifactory will abort the backup and write a message in the log file. Applicable only to non-incremental backups. Default value is `false`.
	VerifyDiskSpace *bool `json:"verifyDiskSpace,omitempty" tf:"verify_disk_space,omitempty"`
}

type BackupParameters struct {

	// If set, backups will be created within a Zip archive (Slow and CPU intensive). Default value is false.
	// If set to true, backups will be created within a Zip archive (Slow and CPU intensive). Default value is `false`
	// +kubebuilder:validation:Optional
	CreateArchive *bool `json:"createArchive,omitempty" tf:"create_archive,omitempty"`

	// A valid CRON expression that you can use to control backup frequency. Eg: "0 0 12 * * ? *", "0 0 2 ? * MON-SAT *". Note: please use 7 character format - Seconds, Minutes Hours, Day Of Month, Month, Day Of Week, Year. Also, specifying both a day-of-week AND a day-of-month parameter is not supported. One of them should be replaced by ?. Incorrect: * 5,7,9 14/2 * * WED,SAT *, correct: * 5,7,9 14/2 ? * WED,SAT *. See details in Cron Trigger Tutorial and in Cronexp package readme.
	// Cron expression to control the backup frequency.
	// +kubebuilder:validation:Optional
	CronExp *string `json:"cronExp,omitempty" tf:"cron_exp,omitempty"`

	// Flag to enable or disable the backup config. Default value is true.
	// Flag to enable or disable the backup config. Default value is `true`.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// When set, new repositories will not be automatically added to the backup. Default value is false.
	// When set to true, new repositories will not be automatically added to the backup. Default value is `false`.
	// +kubebuilder:validation:Optional
	ExcludeNewRepositories *bool `json:"excludeNewRepositories,omitempty" tf:"exclude_new_repositories,omitempty"`

	// A list of excluded repositories from the backup. Default is empty list.
	// List of excluded repositories from the backup. Default is empty list.
	// +kubebuilder:validation:Optional
	ExcludedRepositories []*string `json:"excludedRepositories,omitempty" tf:"excluded_repositories,omitempty"`

	// When set to true, mission control will not be automatically added to the backup. Default value is false.
	// When set to true, mission control will not be automatically added to the backup. Default value is `false`.
	// +kubebuilder:validation:Optional
	ExportMissionControl *bool `json:"exportMissionControl,omitempty" tf:"export_mission_control,omitempty"`

	// The unique ID of the artifactory backup config.
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The number of hours to keep a backup before Artifactory will clean it up to free up disk space. Applicable only to non-incremental backups. Default value is 168 hours ie: 7 days.
	// The number of hours to keep a backup before Artifactory will clean it up to free up disk space. Applicable only to non-incremental backups. Default value is 168 hours i.e. 7 days.
	// +kubebuilder:validation:Optional
	RetentionPeriodHours *float64 `json:"retentionPeriodHours,omitempty" tf:"retention_period_hours,omitempty"`

	// If set, all Artifactory administrators will be notified by email if any problem is encountered during backup. Default value is true.
	// If set to true, all Artifactory administrators will be notified by email if any problem is encountered during backup. Default value is `true`.
	// +kubebuilder:validation:Optional
	SendMailOnError *bool `json:"sendMailOnError,omitempty" tf:"send_mail_on_error,omitempty"`

	// If set, Artifactory will verify that the backup target location has enough disk space available to hold the backed up data. If there is not enough space available, Artifactory will abort the backup and write a message in the log file. Applicable only to non-incremental backups.
	// If set, Artifactory will verify that the backup target location has enough disk space available to hold the backed up data. If there is not enough space available, Artifactory will abort the backup and write a message in the log file. Applicable only to non-incremental backups. Default value is `false`.
	// +kubebuilder:validation:Optional
	VerifyDiskSpace *bool `json:"verifyDiskSpace,omitempty" tf:"verify_disk_space,omitempty"`
}

// BackupSpec defines the desired state of Backup
type BackupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BackupParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BackupInitParameters `json:"initProvider,omitempty"`
}

// BackupStatus defines the observed state of Backup.
type BackupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BackupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Backup is the Schema for the Backups API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,artifactory}
type Backup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.cronExp) || (has(self.initProvider) && has(self.initProvider.cronExp))",message="spec.forProvider.cronExp is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.key) || (has(self.initProvider) && has(self.initProvider.key))",message="spec.forProvider.key is a required parameter"
	Spec   BackupSpec   `json:"spec"`
	Status BackupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BackupList contains a list of Backups
type BackupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Backup `json:"items"`
}

// Repository type metadata.
var (
	Backup_Kind             = "Backup"
	Backup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Backup_Kind}.String()
	Backup_KindAPIVersion   = Backup_Kind + "." + CRDGroupVersion.String()
	Backup_GroupVersionKind = CRDGroupVersion.WithKind(Backup_Kind)
)

func init() {
	SchemeBuilder.Register(&Backup{}, &BackupList{})
}
