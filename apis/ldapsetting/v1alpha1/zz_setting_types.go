// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SettingInitParameters struct {

	// When set, users created after logging in using LDAP will be able to access their profile page.  Default value is false.
	// Auto created users will have access to their profile page and will be able to perform actions such as generating an API key. Default value is "false".
	AllowUserToAccessProfile *bool `json:"allowUserToAccessProfile,omitempty" tf:"allow_user_to_access_profile,omitempty"`

	// When set, the system will automatically create new users for those who have logged in using LDAP, and assign them to the default groups.  Default value is true.
	// When set, users are automatically created when using LDAP. Otherwise, users are transient and associated with auto-join groups defined in Artifactory. Default value is "true".
	AutoCreateUser *bool `json:"autoCreateUser,omitempty" tf:"auto_create_user,omitempty"`

	// An attribute that can be used to map a user's email address to a user created automatically in Artifactory. Default value is mail.
	// An attribute that can be used to map a user's email address to a user created automatically in Artifactory. Default value is "mail".
	EmailAttribute *string `json:"emailAttribute,omitempty" tf:"email_attribute,omitempty"`

	// When set, these settings are enabled. Default value is true.
	// Flag to enable or disable the ldap setting. Default value is "true".
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The unique ID of the LDAP setting.
	// Ldap setting name.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Protects against LDAP poisoning by filtering out users exposed to vulnerabilities.  Default value is true.
	// Protects against LDAP poisoning by filtering out users exposed to vulnerabilities. Default value is "true".
	LdapPoisoningProtection *bool `json:"ldapPoisoningProtection,omitempty" tf:"ldap_poisoning_protection,omitempty"`

	// Location of the LDAP server in the following format: ldap://myserver:myport/dc=sampledomain,dc=com. The URL should include the base DN used to search for and/or authenticate users.
	// Location of the LDAP server in the following format: ldap://myldapserver/dc=sampledomain,dc=com
	LdapURL *string `json:"ldapUrl,omitempty" tf:"ldap_url,omitempty"`

	// The full DN of a user with permissions that allow querying the LDAP server. When working with LDAP Groups, the user should have permissions for any extra group attributes such as memberOf.
	// The full DN of the user that binds to the LDAP server to perform user searches. Only used with "search" authentication.
	ManagerDn *string `json:"managerDn,omitempty" tf:"manager_dn,omitempty"`

	// The password of the user binding to the LDAP server when using "search" authentication.
	// The password of the user that binds to the LDAP server to perform the search. Only used with "search" authentication.
	ManagerPasswordSecretRef *v1.SecretKeySelector `json:"managerPasswordSecretRef,omitempty" tf:"-"`

	// When set, supports paging results for the LDAP server. This feature requires that the LDAP Server supports a PagedResultsControl configuration.  Default value is true.
	// When set, supports paging results for the LDAP server. This feature requires that the LDAP server supports a PagedResultsControl configuration. Default value is "true".
	PagingSupportEnabled *bool `json:"pagingSupportEnabled,omitempty" tf:"paging_support_enabled,omitempty"`

	// The Context name in which to search relative to the base DN in the LDAP URL. Multiple search bases may be specified separated by a pipe ( | ).
	// A context name to search in relative to the base DN of the LDAP URL. For example, 'ou=users' With the LDAP Group Add-on enabled, it is possible to enter multiple search base entries separated by a pipe ('|') character.
	SearchBase *string `json:"searchBase,omitempty" tf:"search_base,omitempty"`

	// A filter expression used to search for the user DN that is used in LDAP authentication. This is an LDAP search filter (as defined in 'RFC 2254') with optional arguments. In this case, the username is the only argument, denoted by '{0}'. Possible examples are: uid={0}) - this would search for a username match on the uid attribute. Authentication using LDAP is performed from the DN found if successful. Default value is blank/empty.
	// A filter expression used to search for the user DN used in LDAP authentication. This is an LDAP search filter (as defined in 'RFC 2254') with optional arguments. In this case, the username is the only argument, and is denoted by '{0}'. Possible examples are: (uid={0}) - This searches for a username match on the attribute. Authentication to LDAP is performed from the DN found if successful.
	SearchFilter *string `json:"searchFilter,omitempty" tf:"search_filter,omitempty"`

	// When set, enables deep search through the sub-tree of the LDAP URL + Search Base.  Default value is true.
	// When set, enables deep search through the sub tree of the LDAP URL + search base. Default value is "true".
	SearchSubTree *bool `json:"searchSubTree,omitempty" tf:"search_sub_tree,omitempty"`

	// A DN pattern used to log users directly in to the LDAP database. This pattern is used to create a DN string for "direct" user authentication, and is relative to the base DN in the LDAP URL. The pattern argument {0} is replaced with the username at runtime. This only works if anonymous binding is allowed and a direct user DN can be used (which is not the default case for Active Directory). For example: uid={0},ou=People. Default value is blank/empty.
	// A DN pattern that can be used to log users directly in to LDAP. This pattern is used to create a DN string for 'direct' user authentication where the pattern is relative to the base DN in the LDAP URL. The pattern argument {0} is replaced with the username. This only works if anonymous binding is allowed and a direct user DN can be used, which is not the default case for Active Directory (use User DN search filter instead). Example: uid={0},ou=People. Default value is blank/empty.
	UserDnPattern *string `json:"userDnPattern,omitempty" tf:"user_dn_pattern,omitempty"`
}

type SettingObservation struct {

	// When set, users created after logging in using LDAP will be able to access their profile page.  Default value is false.
	// Auto created users will have access to their profile page and will be able to perform actions such as generating an API key. Default value is "false".
	AllowUserToAccessProfile *bool `json:"allowUserToAccessProfile,omitempty" tf:"allow_user_to_access_profile,omitempty"`

	// When set, the system will automatically create new users for those who have logged in using LDAP, and assign them to the default groups.  Default value is true.
	// When set, users are automatically created when using LDAP. Otherwise, users are transient and associated with auto-join groups defined in Artifactory. Default value is "true".
	AutoCreateUser *bool `json:"autoCreateUser,omitempty" tf:"auto_create_user,omitempty"`

	// An attribute that can be used to map a user's email address to a user created automatically in Artifactory. Default value is mail.
	// An attribute that can be used to map a user's email address to a user created automatically in Artifactory. Default value is "mail".
	EmailAttribute *string `json:"emailAttribute,omitempty" tf:"email_attribute,omitempty"`

	// When set, these settings are enabled. Default value is true.
	// Flag to enable or disable the ldap setting. Default value is "true".
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The unique ID of the LDAP setting.
	// Ldap setting name.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Protects against LDAP poisoning by filtering out users exposed to vulnerabilities.  Default value is true.
	// Protects against LDAP poisoning by filtering out users exposed to vulnerabilities. Default value is "true".
	LdapPoisoningProtection *bool `json:"ldapPoisoningProtection,omitempty" tf:"ldap_poisoning_protection,omitempty"`

	// Location of the LDAP server in the following format: ldap://myserver:myport/dc=sampledomain,dc=com. The URL should include the base DN used to search for and/or authenticate users.
	// Location of the LDAP server in the following format: ldap://myldapserver/dc=sampledomain,dc=com
	LdapURL *string `json:"ldapUrl,omitempty" tf:"ldap_url,omitempty"`

	// The full DN of a user with permissions that allow querying the LDAP server. When working with LDAP Groups, the user should have permissions for any extra group attributes such as memberOf.
	// The full DN of the user that binds to the LDAP server to perform user searches. Only used with "search" authentication.
	ManagerDn *string `json:"managerDn,omitempty" tf:"manager_dn,omitempty"`

	// When set, supports paging results for the LDAP server. This feature requires that the LDAP Server supports a PagedResultsControl configuration.  Default value is true.
	// When set, supports paging results for the LDAP server. This feature requires that the LDAP server supports a PagedResultsControl configuration. Default value is "true".
	PagingSupportEnabled *bool `json:"pagingSupportEnabled,omitempty" tf:"paging_support_enabled,omitempty"`

	// The Context name in which to search relative to the base DN in the LDAP URL. Multiple search bases may be specified separated by a pipe ( | ).
	// A context name to search in relative to the base DN of the LDAP URL. For example, 'ou=users' With the LDAP Group Add-on enabled, it is possible to enter multiple search base entries separated by a pipe ('|') character.
	SearchBase *string `json:"searchBase,omitempty" tf:"search_base,omitempty"`

	// A filter expression used to search for the user DN that is used in LDAP authentication. This is an LDAP search filter (as defined in 'RFC 2254') with optional arguments. In this case, the username is the only argument, denoted by '{0}'. Possible examples are: uid={0}) - this would search for a username match on the uid attribute. Authentication using LDAP is performed from the DN found if successful. Default value is blank/empty.
	// A filter expression used to search for the user DN used in LDAP authentication. This is an LDAP search filter (as defined in 'RFC 2254') with optional arguments. In this case, the username is the only argument, and is denoted by '{0}'. Possible examples are: (uid={0}) - This searches for a username match on the attribute. Authentication to LDAP is performed from the DN found if successful.
	SearchFilter *string `json:"searchFilter,omitempty" tf:"search_filter,omitempty"`

	// When set, enables deep search through the sub-tree of the LDAP URL + Search Base.  Default value is true.
	// When set, enables deep search through the sub tree of the LDAP URL + search base. Default value is "true".
	SearchSubTree *bool `json:"searchSubTree,omitempty" tf:"search_sub_tree,omitempty"`

	// A DN pattern used to log users directly in to the LDAP database. This pattern is used to create a DN string for "direct" user authentication, and is relative to the base DN in the LDAP URL. The pattern argument {0} is replaced with the username at runtime. This only works if anonymous binding is allowed and a direct user DN can be used (which is not the default case for Active Directory). For example: uid={0},ou=People. Default value is blank/empty.
	// A DN pattern that can be used to log users directly in to LDAP. This pattern is used to create a DN string for 'direct' user authentication where the pattern is relative to the base DN in the LDAP URL. The pattern argument {0} is replaced with the username. This only works if anonymous binding is allowed and a direct user DN can be used, which is not the default case for Active Directory (use User DN search filter instead). Example: uid={0},ou=People. Default value is blank/empty.
	UserDnPattern *string `json:"userDnPattern,omitempty" tf:"user_dn_pattern,omitempty"`
}

type SettingParameters struct {

	// When set, users created after logging in using LDAP will be able to access their profile page.  Default value is false.
	// Auto created users will have access to their profile page and will be able to perform actions such as generating an API key. Default value is "false".
	// +kubebuilder:validation:Optional
	AllowUserToAccessProfile *bool `json:"allowUserToAccessProfile,omitempty" tf:"allow_user_to_access_profile,omitempty"`

	// When set, the system will automatically create new users for those who have logged in using LDAP, and assign them to the default groups.  Default value is true.
	// When set, users are automatically created when using LDAP. Otherwise, users are transient and associated with auto-join groups defined in Artifactory. Default value is "true".
	// +kubebuilder:validation:Optional
	AutoCreateUser *bool `json:"autoCreateUser,omitempty" tf:"auto_create_user,omitempty"`

	// An attribute that can be used to map a user's email address to a user created automatically in Artifactory. Default value is mail.
	// An attribute that can be used to map a user's email address to a user created automatically in Artifactory. Default value is "mail".
	// +kubebuilder:validation:Optional
	EmailAttribute *string `json:"emailAttribute,omitempty" tf:"email_attribute,omitempty"`

	// When set, these settings are enabled. Default value is true.
	// Flag to enable or disable the ldap setting. Default value is "true".
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The unique ID of the LDAP setting.
	// Ldap setting name.
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// Protects against LDAP poisoning by filtering out users exposed to vulnerabilities.  Default value is true.
	// Protects against LDAP poisoning by filtering out users exposed to vulnerabilities. Default value is "true".
	// +kubebuilder:validation:Optional
	LdapPoisoningProtection *bool `json:"ldapPoisoningProtection,omitempty" tf:"ldap_poisoning_protection,omitempty"`

	// Location of the LDAP server in the following format: ldap://myserver:myport/dc=sampledomain,dc=com. The URL should include the base DN used to search for and/or authenticate users.
	// Location of the LDAP server in the following format: ldap://myldapserver/dc=sampledomain,dc=com
	// +kubebuilder:validation:Optional
	LdapURL *string `json:"ldapUrl,omitempty" tf:"ldap_url,omitempty"`

	// The full DN of a user with permissions that allow querying the LDAP server. When working with LDAP Groups, the user should have permissions for any extra group attributes such as memberOf.
	// The full DN of the user that binds to the LDAP server to perform user searches. Only used with "search" authentication.
	// +kubebuilder:validation:Optional
	ManagerDn *string `json:"managerDn,omitempty" tf:"manager_dn,omitempty"`

	// The password of the user binding to the LDAP server when using "search" authentication.
	// The password of the user that binds to the LDAP server to perform the search. Only used with "search" authentication.
	// +kubebuilder:validation:Optional
	ManagerPasswordSecretRef *v1.SecretKeySelector `json:"managerPasswordSecretRef,omitempty" tf:"-"`

	// When set, supports paging results for the LDAP server. This feature requires that the LDAP Server supports a PagedResultsControl configuration.  Default value is true.
	// When set, supports paging results for the LDAP server. This feature requires that the LDAP server supports a PagedResultsControl configuration. Default value is "true".
	// +kubebuilder:validation:Optional
	PagingSupportEnabled *bool `json:"pagingSupportEnabled,omitempty" tf:"paging_support_enabled,omitempty"`

	// The Context name in which to search relative to the base DN in the LDAP URL. Multiple search bases may be specified separated by a pipe ( | ).
	// A context name to search in relative to the base DN of the LDAP URL. For example, 'ou=users' With the LDAP Group Add-on enabled, it is possible to enter multiple search base entries separated by a pipe ('|') character.
	// +kubebuilder:validation:Optional
	SearchBase *string `json:"searchBase,omitempty" tf:"search_base,omitempty"`

	// A filter expression used to search for the user DN that is used in LDAP authentication. This is an LDAP search filter (as defined in 'RFC 2254') with optional arguments. In this case, the username is the only argument, denoted by '{0}'. Possible examples are: uid={0}) - this would search for a username match on the uid attribute. Authentication using LDAP is performed from the DN found if successful. Default value is blank/empty.
	// A filter expression used to search for the user DN used in LDAP authentication. This is an LDAP search filter (as defined in 'RFC 2254') with optional arguments. In this case, the username is the only argument, and is denoted by '{0}'. Possible examples are: (uid={0}) - This searches for a username match on the attribute. Authentication to LDAP is performed from the DN found if successful.
	// +kubebuilder:validation:Optional
	SearchFilter *string `json:"searchFilter,omitempty" tf:"search_filter,omitempty"`

	// When set, enables deep search through the sub-tree of the LDAP URL + Search Base.  Default value is true.
	// When set, enables deep search through the sub tree of the LDAP URL + search base. Default value is "true".
	// +kubebuilder:validation:Optional
	SearchSubTree *bool `json:"searchSubTree,omitempty" tf:"search_sub_tree,omitempty"`

	// A DN pattern used to log users directly in to the LDAP database. This pattern is used to create a DN string for "direct" user authentication, and is relative to the base DN in the LDAP URL. The pattern argument {0} is replaced with the username at runtime. This only works if anonymous binding is allowed and a direct user DN can be used (which is not the default case for Active Directory). For example: uid={0},ou=People. Default value is blank/empty.
	// A DN pattern that can be used to log users directly in to LDAP. This pattern is used to create a DN string for 'direct' user authentication where the pattern is relative to the base DN in the LDAP URL. The pattern argument {0} is replaced with the username. This only works if anonymous binding is allowed and a direct user DN can be used, which is not the default case for Active Directory (use User DN search filter instead). Example: uid={0},ou=People. Default value is blank/empty.
	// +kubebuilder:validation:Optional
	UserDnPattern *string `json:"userDnPattern,omitempty" tf:"user_dn_pattern,omitempty"`
}

// SettingSpec defines the desired state of Setting
type SettingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SettingParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SettingInitParameters `json:"initProvider,omitempty"`
}

// SettingStatus defines the observed state of Setting.
type SettingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SettingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Setting is the Schema for the Settings API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,artifactory}
type Setting struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.key) || (has(self.initProvider) && has(self.initProvider.key))",message="spec.forProvider.key is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ldapUrl) || (has(self.initProvider) && has(self.initProvider.ldapUrl))",message="spec.forProvider.ldapUrl is a required parameter"
	Spec   SettingSpec   `json:"spec"`
	Status SettingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SettingList contains a list of Settings
type SettingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Setting `json:"items"`
}

// Repository type metadata.
var (
	Setting_Kind             = "Setting"
	Setting_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Setting_Kind}.String()
	Setting_KindAPIVersion   = Setting_Kind + "." + CRDGroupVersion.String()
	Setting_GroupVersionKind = CRDGroupVersion.WithKind(Setting_Kind)
)

func init() {
	SchemeBuilder.Register(&Setting{}, &SettingList{})
}
