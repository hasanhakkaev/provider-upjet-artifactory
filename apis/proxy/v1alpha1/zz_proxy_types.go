// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ProxyInitParameters struct {

	// The name of the proxy host.
	// The name of the proxy host.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// The unique ID of the proxy.
	// The unique ID of the proxy.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The proxy domain/realm name.
	// The proxy domain/realm name.
	NtDomain *string `json:"ntDomain,omitempty" tf:"nt_domain,omitempty"`

	// The computer name of the machine (the machine connecting to the NTLM proxy).
	// The computer name of the machine (the machine connecting to the NTLM proxy).
	NtHost *string `json:"ntHost,omitempty" tf:"nt_host,omitempty"`

	// The proxy password when authentication credentials are required.
	// The proxy password when authentication credentials are required.
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// When set, this proxy will be the default proxy for new remote repositories and for internal HTTP requests issued by Artifactory. Will also be used as proxy for all other services in the platform (for example: Xray, Distribution, etc).
	// When set, this proxy will be the default proxy for new remote repositories and for internal HTTP requests issued by Artifactory. Will also be used as proxy for all other services in the platform (for example: Xray, Distribution, etc).
	PlatformDefault *bool `json:"platformDefault,omitempty" tf:"platform_default,omitempty"`

	// The proxy port number.
	// The proxy port number.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// An optional list of host names to which this proxy may redirect requests. The credentials defined for the proxy are reused by requests redirected to all of these hosts.
	// An optional list of host names to which this proxy may redirect requests. The credentials defined for the proxy are reused by requests redirected to all of these hosts.
	// +listType=set
	RedirectToHosts []*string `json:"redirectToHosts,omitempty" tf:"redirect_to_hosts,omitempty"`

	// An optional list of services names to which this proxy be the default of. The options are jfrt, jfmc, jfxr, jfds.
	// An optional list of services names to which this proxy be the default of. The options are jfrt, jfmc, jfxr, jfds
	// +listType=set
	Services []*string `json:"services,omitempty" tf:"services,omitempty"`

	// The proxy username when authentication credentials are required.
	// The proxy username when authentication credentials are required.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type ProxyObservation struct {

	// The name of the proxy host.
	// The name of the proxy host.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The unique ID of the proxy.
	// The unique ID of the proxy.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The proxy domain/realm name.
	// The proxy domain/realm name.
	NtDomain *string `json:"ntDomain,omitempty" tf:"nt_domain,omitempty"`

	// The computer name of the machine (the machine connecting to the NTLM proxy).
	// The computer name of the machine (the machine connecting to the NTLM proxy).
	NtHost *string `json:"ntHost,omitempty" tf:"nt_host,omitempty"`

	// When set, this proxy will be the default proxy for new remote repositories and for internal HTTP requests issued by Artifactory. Will also be used as proxy for all other services in the platform (for example: Xray, Distribution, etc).
	// When set, this proxy will be the default proxy for new remote repositories and for internal HTTP requests issued by Artifactory. Will also be used as proxy for all other services in the platform (for example: Xray, Distribution, etc).
	PlatformDefault *bool `json:"platformDefault,omitempty" tf:"platform_default,omitempty"`

	// The proxy port number.
	// The proxy port number.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// An optional list of host names to which this proxy may redirect requests. The credentials defined for the proxy are reused by requests redirected to all of these hosts.
	// An optional list of host names to which this proxy may redirect requests. The credentials defined for the proxy are reused by requests redirected to all of these hosts.
	// +listType=set
	RedirectToHosts []*string `json:"redirectToHosts,omitempty" tf:"redirect_to_hosts,omitempty"`

	// An optional list of services names to which this proxy be the default of. The options are jfrt, jfmc, jfxr, jfds.
	// An optional list of services names to which this proxy be the default of. The options are jfrt, jfmc, jfxr, jfds
	// +listType=set
	Services []*string `json:"services,omitempty" tf:"services,omitempty"`

	// The proxy username when authentication credentials are required.
	// The proxy username when authentication credentials are required.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type ProxyParameters struct {

	// The name of the proxy host.
	// The name of the proxy host.
	// +kubebuilder:validation:Optional
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// The unique ID of the proxy.
	// The unique ID of the proxy.
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The proxy domain/realm name.
	// The proxy domain/realm name.
	// +kubebuilder:validation:Optional
	NtDomain *string `json:"ntDomain,omitempty" tf:"nt_domain,omitempty"`

	// The computer name of the machine (the machine connecting to the NTLM proxy).
	// The computer name of the machine (the machine connecting to the NTLM proxy).
	// +kubebuilder:validation:Optional
	NtHost *string `json:"ntHost,omitempty" tf:"nt_host,omitempty"`

	// The proxy password when authentication credentials are required.
	// The proxy password when authentication credentials are required.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// When set, this proxy will be the default proxy for new remote repositories and for internal HTTP requests issued by Artifactory. Will also be used as proxy for all other services in the platform (for example: Xray, Distribution, etc).
	// When set, this proxy will be the default proxy for new remote repositories and for internal HTTP requests issued by Artifactory. Will also be used as proxy for all other services in the platform (for example: Xray, Distribution, etc).
	// +kubebuilder:validation:Optional
	PlatformDefault *bool `json:"platformDefault,omitempty" tf:"platform_default,omitempty"`

	// The proxy port number.
	// The proxy port number.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// An optional list of host names to which this proxy may redirect requests. The credentials defined for the proxy are reused by requests redirected to all of these hosts.
	// An optional list of host names to which this proxy may redirect requests. The credentials defined for the proxy are reused by requests redirected to all of these hosts.
	// +kubebuilder:validation:Optional
	// +listType=set
	RedirectToHosts []*string `json:"redirectToHosts,omitempty" tf:"redirect_to_hosts,omitempty"`

	// An optional list of services names to which this proxy be the default of. The options are jfrt, jfmc, jfxr, jfds.
	// An optional list of services names to which this proxy be the default of. The options are jfrt, jfmc, jfxr, jfds
	// +kubebuilder:validation:Optional
	// +listType=set
	Services []*string `json:"services,omitempty" tf:"services,omitempty"`

	// The proxy username when authentication credentials are required.
	// The proxy username when authentication credentials are required.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

// ProxySpec defines the desired state of Proxy
type ProxySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProxyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ProxyInitParameters `json:"initProvider,omitempty"`
}

// ProxyStatus defines the observed state of Proxy.
type ProxyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProxyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Proxy is the Schema for the Proxys API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,artifactory}
type Proxy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.host) || (has(self.initProvider) && has(self.initProvider.host))",message="spec.forProvider.host is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.key) || (has(self.initProvider) && has(self.initProvider.key))",message="spec.forProvider.key is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.port) || (has(self.initProvider) && has(self.initProvider.port))",message="spec.forProvider.port is a required parameter"
	Spec   ProxySpec   `json:"spec"`
	Status ProxyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProxyList contains a list of Proxys
type ProxyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Proxy `json:"items"`
}

// Repository type metadata.
var (
	Proxy_Kind             = "Proxy"
	Proxy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Proxy_Kind}.String()
	Proxy_KindAPIVersion   = Proxy_Kind + "." + CRDGroupVersion.String()
	Proxy_GroupVersionKind = CRDGroupVersion.WithKind(Proxy_Kind)
)

func init() {
	SchemeBuilder.Register(&Proxy{}, &ProxyList{})
}
