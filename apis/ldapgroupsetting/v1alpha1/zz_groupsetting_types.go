// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GroupSettingInitParameters struct {

	// An attribute on the group entry which denoting the group description. Used when importing groups.
	// An attribute on the group entry which denoting the group description. Used when importing groups.
	DescriptionAttribute *string `json:"descriptionAttribute,omitempty" tf:"description_attribute,omitempty"`

	// The LDAP filter used to search for group entries. Used for importing groups.
	// The LDAP filter used to search for group entries. Used for importing groups.
	Filter *string `json:"filter,omitempty" tf:"filter,omitempty"`

	// A search base for group entry DNs, relative to the DN on the LDAP server’s URL (and not relative to the LDAP Setting’s “Search Base”). Used when importing groups.
	// A search base for group entry DNs, relative to the DN on the LDAP server’s URL (and not relative to the LDAP Setting’s “Search Base”). Used when importing groups.
	GroupBaseDn *string `json:"groupBaseDn,omitempty" tf:"group_base_dn,omitempty"`

	// A multi-value attribute on the group entry containing user DNs or IDs of the group members (e.g., uniqueMember,member).
	// A multi-value attribute on the group entry containing user DNs or IDs of the group members (e.g., uniqueMember,member).
	GroupMemberAttribute *string `json:"groupMemberAttribute,omitempty" tf:"group_member_attribute,omitempty"`

	// Attribute on the group entry denoting the group name. Used when importing groups.
	// Attribute on the group entry denoting the group name. Used when importing groups.
	GroupNameAttribute *string `json:"groupNameAttribute,omitempty" tf:"group_name_attribute,omitempty"`

	// The LDAP setting key you want to use for group retrieval. The value for this field corresponds to 'enabledLdap' field of the ldap group setting XML block of system configuration.
	// The LDAP setting key you want to use for group retrieval. The value for this field corresponds to 'enabledLdap' field of the ldap group setting XML block of system configuration.
	LdapSettingKey *string `json:"ldapSettingKey,omitempty" tf:"ldap_setting_key,omitempty"`

	// Ldap group setting name.
	// Ldap group setting name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The JFrog Platform Deployment (JPD) supports three ways of mapping groups to LDAP schemas:
	// The JFrog Platform Deployment (JPD) supports three ways of mapping groups to LDAP schemas:
	// Static: Group objects are aware of their members, however, the users are not aware of the groups they belong to. Each group object such as groupOfNames or groupOfUniqueNames holds its respective member attributes, typically member or uniqueMember, which is a user DN.
	// Dynamic: User objects are aware of what groups they belong to, but the group objects are not aware of their members. Each user object contains a custom attribute, such as group, that holds the group DNs or group names of which the user is a member.
	// Hierarchy: The user's DN is indicative of the groups the user belongs to by using group names as part of user DN hierarchy. Each user DN contains a list of ou's or custom attributes that make up the group association. For example, uid=user1,ou=developers,ou=uk,dc=jfrog,dc=org indicates that user1 belongs to two groups: uk and developers.
	Strategy *string `json:"strategy,omitempty" tf:"strategy,omitempty"`

	// When set, enables deep search through the sub-tree of the LDAP URL + Search Base. True by default.
	// When set, enables deep search through the sub-tree of the LDAP URL + Search Base. True by default.
	SubTree *bool `json:"subTree,omitempty" tf:"sub_tree,omitempty"`
}

type GroupSettingObservation struct {

	// An attribute on the group entry which denoting the group description. Used when importing groups.
	// An attribute on the group entry which denoting the group description. Used when importing groups.
	DescriptionAttribute *string `json:"descriptionAttribute,omitempty" tf:"description_attribute,omitempty"`

	// The LDAP filter used to search for group entries. Used for importing groups.
	// The LDAP filter used to search for group entries. Used for importing groups.
	Filter *string `json:"filter,omitempty" tf:"filter,omitempty"`

	// A search base for group entry DNs, relative to the DN on the LDAP server’s URL (and not relative to the LDAP Setting’s “Search Base”). Used when importing groups.
	// A search base for group entry DNs, relative to the DN on the LDAP server’s URL (and not relative to the LDAP Setting’s “Search Base”). Used when importing groups.
	GroupBaseDn *string `json:"groupBaseDn,omitempty" tf:"group_base_dn,omitempty"`

	// A multi-value attribute on the group entry containing user DNs or IDs of the group members (e.g., uniqueMember,member).
	// A multi-value attribute on the group entry containing user DNs or IDs of the group members (e.g., uniqueMember,member).
	GroupMemberAttribute *string `json:"groupMemberAttribute,omitempty" tf:"group_member_attribute,omitempty"`

	// Attribute on the group entry denoting the group name. Used when importing groups.
	// Attribute on the group entry denoting the group name. Used when importing groups.
	GroupNameAttribute *string `json:"groupNameAttribute,omitempty" tf:"group_name_attribute,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The LDAP setting key you want to use for group retrieval. The value for this field corresponds to 'enabledLdap' field of the ldap group setting XML block of system configuration.
	// The LDAP setting key you want to use for group retrieval. The value for this field corresponds to 'enabledLdap' field of the ldap group setting XML block of system configuration.
	LdapSettingKey *string `json:"ldapSettingKey,omitempty" tf:"ldap_setting_key,omitempty"`

	// Ldap group setting name.
	// Ldap group setting name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The JFrog Platform Deployment (JPD) supports three ways of mapping groups to LDAP schemas:
	// The JFrog Platform Deployment (JPD) supports three ways of mapping groups to LDAP schemas:
	// Static: Group objects are aware of their members, however, the users are not aware of the groups they belong to. Each group object such as groupOfNames or groupOfUniqueNames holds its respective member attributes, typically member or uniqueMember, which is a user DN.
	// Dynamic: User objects are aware of what groups they belong to, but the group objects are not aware of their members. Each user object contains a custom attribute, such as group, that holds the group DNs or group names of which the user is a member.
	// Hierarchy: The user's DN is indicative of the groups the user belongs to by using group names as part of user DN hierarchy. Each user DN contains a list of ou's or custom attributes that make up the group association. For example, uid=user1,ou=developers,ou=uk,dc=jfrog,dc=org indicates that user1 belongs to two groups: uk and developers.
	Strategy *string `json:"strategy,omitempty" tf:"strategy,omitempty"`

	// When set, enables deep search through the sub-tree of the LDAP URL + Search Base. True by default.
	// When set, enables deep search through the sub-tree of the LDAP URL + Search Base. True by default.
	SubTree *bool `json:"subTree,omitempty" tf:"sub_tree,omitempty"`
}

type GroupSettingParameters struct {

	// An attribute on the group entry which denoting the group description. Used when importing groups.
	// An attribute on the group entry which denoting the group description. Used when importing groups.
	// +kubebuilder:validation:Optional
	DescriptionAttribute *string `json:"descriptionAttribute,omitempty" tf:"description_attribute,omitempty"`

	// The LDAP filter used to search for group entries. Used for importing groups.
	// The LDAP filter used to search for group entries. Used for importing groups.
	// +kubebuilder:validation:Optional
	Filter *string `json:"filter,omitempty" tf:"filter,omitempty"`

	// A search base for group entry DNs, relative to the DN on the LDAP server’s URL (and not relative to the LDAP Setting’s “Search Base”). Used when importing groups.
	// A search base for group entry DNs, relative to the DN on the LDAP server’s URL (and not relative to the LDAP Setting’s “Search Base”). Used when importing groups.
	// +kubebuilder:validation:Optional
	GroupBaseDn *string `json:"groupBaseDn,omitempty" tf:"group_base_dn,omitempty"`

	// A multi-value attribute on the group entry containing user DNs or IDs of the group members (e.g., uniqueMember,member).
	// A multi-value attribute on the group entry containing user DNs or IDs of the group members (e.g., uniqueMember,member).
	// +kubebuilder:validation:Optional
	GroupMemberAttribute *string `json:"groupMemberAttribute,omitempty" tf:"group_member_attribute,omitempty"`

	// Attribute on the group entry denoting the group name. Used when importing groups.
	// Attribute on the group entry denoting the group name. Used when importing groups.
	// +kubebuilder:validation:Optional
	GroupNameAttribute *string `json:"groupNameAttribute,omitempty" tf:"group_name_attribute,omitempty"`

	// The LDAP setting key you want to use for group retrieval. The value for this field corresponds to 'enabledLdap' field of the ldap group setting XML block of system configuration.
	// The LDAP setting key you want to use for group retrieval. The value for this field corresponds to 'enabledLdap' field of the ldap group setting XML block of system configuration.
	// +kubebuilder:validation:Optional
	LdapSettingKey *string `json:"ldapSettingKey,omitempty" tf:"ldap_setting_key,omitempty"`

	// Ldap group setting name.
	// Ldap group setting name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The JFrog Platform Deployment (JPD) supports three ways of mapping groups to LDAP schemas:
	// The JFrog Platform Deployment (JPD) supports three ways of mapping groups to LDAP schemas:
	// Static: Group objects are aware of their members, however, the users are not aware of the groups they belong to. Each group object such as groupOfNames or groupOfUniqueNames holds its respective member attributes, typically member or uniqueMember, which is a user DN.
	// Dynamic: User objects are aware of what groups they belong to, but the group objects are not aware of their members. Each user object contains a custom attribute, such as group, that holds the group DNs or group names of which the user is a member.
	// Hierarchy: The user's DN is indicative of the groups the user belongs to by using group names as part of user DN hierarchy. Each user DN contains a list of ou's or custom attributes that make up the group association. For example, uid=user1,ou=developers,ou=uk,dc=jfrog,dc=org indicates that user1 belongs to two groups: uk and developers.
	// +kubebuilder:validation:Optional
	Strategy *string `json:"strategy,omitempty" tf:"strategy,omitempty"`

	// When set, enables deep search through the sub-tree of the LDAP URL + Search Base. True by default.
	// When set, enables deep search through the sub-tree of the LDAP URL + Search Base. True by default.
	// +kubebuilder:validation:Optional
	SubTree *bool `json:"subTree,omitempty" tf:"sub_tree,omitempty"`
}

// GroupSettingSpec defines the desired state of GroupSetting
type GroupSettingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GroupSettingParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider GroupSettingInitParameters `json:"initProvider,omitempty"`
}

// GroupSettingStatus defines the observed state of GroupSetting.
type GroupSettingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GroupSettingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// GroupSetting is the Schema for the GroupSettings API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,artifactory}
type GroupSetting struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.descriptionAttribute) || (has(self.initProvider) && has(self.initProvider.descriptionAttribute))",message="spec.forProvider.descriptionAttribute is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.filter) || (has(self.initProvider) && has(self.initProvider.filter))",message="spec.forProvider.filter is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.groupMemberAttribute) || (has(self.initProvider) && has(self.initProvider.groupMemberAttribute))",message="spec.forProvider.groupMemberAttribute is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.groupNameAttribute) || (has(self.initProvider) && has(self.initProvider.groupNameAttribute))",message="spec.forProvider.groupNameAttribute is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ldapSettingKey) || (has(self.initProvider) && has(self.initProvider.ldapSettingKey))",message="spec.forProvider.ldapSettingKey is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.strategy) || (has(self.initProvider) && has(self.initProvider.strategy))",message="spec.forProvider.strategy is a required parameter"
	Spec   GroupSettingSpec   `json:"spec"`
	Status GroupSettingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GroupSettingList contains a list of GroupSettings
type GroupSettingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GroupSetting `json:"items"`
}

// Repository type metadata.
var (
	GroupSetting_Kind             = "GroupSetting"
	GroupSetting_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GroupSetting_Kind}.String()
	GroupSetting_KindAPIVersion   = GroupSetting_Kind + "." + CRDGroupVersion.String()
	GroupSetting_GroupVersionKind = CRDGroupVersion.WithKind(GroupSetting_Kind)
)

func init() {
	SchemeBuilder.Register(&GroupSetting{}, &GroupSettingList{})
}
