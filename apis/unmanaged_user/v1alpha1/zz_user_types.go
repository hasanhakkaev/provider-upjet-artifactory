// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type UserInitParameters struct {

	// (Boolean)  When enabled, this user is an administrator with all the ensuing privileges.
	// (Optional, Default: false) When enabled, this user is an administrator with all the ensuing privileges.
	Admin *bool `json:"admin,omitempty" tf:"admin,omitempty"`

	// (Boolean)  When enabled, this user can only access the system through the REST API. This option cannot be set if the user has Admin privileges.
	// (Optional, Default: true) When enabled, this user can only access the system through the REST API. This option cannot be set if the user has Admin privileges.
	DisableUIAccess *bool `json:"disableUiAccess,omitempty" tf:"disable_ui_access,omitempty"`

	// (String) Email for user.
	// Email for user.
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// (Set of String) List of groups this user is a part of. Notes: If this attribute is not specified then user's group membership is set to empty. User will not be part of default "readers" group automatically.
	// List of groups this user is a part of.
	// +listType=set
	Groups []*string `json:"groups,omitempty" tf:"groups,omitempty"`

	// (Boolean)  When enabled, disables the fallback mechanism for using an internal password when external authentication (such as LDAP) is enabled.
	// (Optional, Default: false) When enabled, disables the fallback mechanism for using an internal password when external authentication (such as LDAP) is enabled.
	InternalPasswordDisabled *bool `json:"internalPasswordDisabled,omitempty" tf:"internal_password_disabled,omitempty"`

	// _@ for self-hosted. For SaaS, + is also allowed.
	// Username for user. May contain lowercase letters, numbers and symbols: '.-_@'
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String, Sensitive)  Password for the user. When omitted, a random password is generated using the following password policy: 12 characters with 1 digit, 1 symbol, with upper and lower case letters.
	// (Optional, Sensitive) Password for the user. When omitted, a random password is generated using the following password policy: 12 characters with 1 digit, 1 symbol, with upper and lower case letters
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// (Boolean)  When enabled, this user can update their profile details (except for the password. Only an administrator can update the password). There may be cases in which you want to leave this unset to prevent users from updating their profile. For example, a departmental user with a single password shared between all department members.
	// (Optional, Default: true) When enabled, this user can update their profile details (except for the password. Only an administrator can update the password). There may be cases in which you want to leave this unset to prevent users from updating their profile. For example, a departmental user with a single password shared between all department members.
	ProfileUpdatable *bool `json:"profileUpdatable,omitempty" tf:"profile_updatable,omitempty"`
}

type UserObservation struct {

	// (Boolean)  When enabled, this user is an administrator with all the ensuing privileges.
	// (Optional, Default: false) When enabled, this user is an administrator with all the ensuing privileges.
	Admin *bool `json:"admin,omitempty" tf:"admin,omitempty"`

	// (Boolean)  When enabled, this user can only access the system through the REST API. This option cannot be set if the user has Admin privileges.
	// (Optional, Default: true) When enabled, this user can only access the system through the REST API. This option cannot be set if the user has Admin privileges.
	DisableUIAccess *bool `json:"disableUiAccess,omitempty" tf:"disable_ui_access,omitempty"`

	// (String) Email for user.
	// Email for user.
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// (Set of String) List of groups this user is a part of. Notes: If this attribute is not specified then user's group membership is set to empty. User will not be part of default "readers" group automatically.
	// List of groups this user is a part of.
	// +listType=set
	Groups []*string `json:"groups,omitempty" tf:"groups,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Boolean)  When enabled, disables the fallback mechanism for using an internal password when external authentication (such as LDAP) is enabled.
	// (Optional, Default: false) When enabled, disables the fallback mechanism for using an internal password when external authentication (such as LDAP) is enabled.
	InternalPasswordDisabled *bool `json:"internalPasswordDisabled,omitempty" tf:"internal_password_disabled,omitempty"`

	// _@ for self-hosted. For SaaS, + is also allowed.
	// Username for user. May contain lowercase letters, numbers and symbols: '.-_@'
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (Boolean)  When enabled, this user can update their profile details (except for the password. Only an administrator can update the password). There may be cases in which you want to leave this unset to prevent users from updating their profile. For example, a departmental user with a single password shared between all department members.
	// (Optional, Default: true) When enabled, this user can update their profile details (except for the password. Only an administrator can update the password). There may be cases in which you want to leave this unset to prevent users from updating their profile. For example, a departmental user with a single password shared between all department members.
	ProfileUpdatable *bool `json:"profileUpdatable,omitempty" tf:"profile_updatable,omitempty"`
}

type UserParameters struct {

	// (Boolean)  When enabled, this user is an administrator with all the ensuing privileges.
	// (Optional, Default: false) When enabled, this user is an administrator with all the ensuing privileges.
	// +kubebuilder:validation:Optional
	Admin *bool `json:"admin,omitempty" tf:"admin,omitempty"`

	// (Boolean)  When enabled, this user can only access the system through the REST API. This option cannot be set if the user has Admin privileges.
	// (Optional, Default: true) When enabled, this user can only access the system through the REST API. This option cannot be set if the user has Admin privileges.
	// +kubebuilder:validation:Optional
	DisableUIAccess *bool `json:"disableUiAccess,omitempty" tf:"disable_ui_access,omitempty"`

	// (String) Email for user.
	// Email for user.
	// +kubebuilder:validation:Optional
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// (Set of String) List of groups this user is a part of. Notes: If this attribute is not specified then user's group membership is set to empty. User will not be part of default "readers" group automatically.
	// List of groups this user is a part of.
	// +kubebuilder:validation:Optional
	// +listType=set
	Groups []*string `json:"groups,omitempty" tf:"groups,omitempty"`

	// (Boolean)  When enabled, disables the fallback mechanism for using an internal password when external authentication (such as LDAP) is enabled.
	// (Optional, Default: false) When enabled, disables the fallback mechanism for using an internal password when external authentication (such as LDAP) is enabled.
	// +kubebuilder:validation:Optional
	InternalPasswordDisabled *bool `json:"internalPasswordDisabled,omitempty" tf:"internal_password_disabled,omitempty"`

	// _@ for self-hosted. For SaaS, + is also allowed.
	// Username for user. May contain lowercase letters, numbers and symbols: '.-_@'
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String, Sensitive)  Password for the user. When omitted, a random password is generated using the following password policy: 12 characters with 1 digit, 1 symbol, with upper and lower case letters.
	// (Optional, Sensitive) Password for the user. When omitted, a random password is generated using the following password policy: 12 characters with 1 digit, 1 symbol, with upper and lower case letters
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// (Boolean)  When enabled, this user can update their profile details (except for the password. Only an administrator can update the password). There may be cases in which you want to leave this unset to prevent users from updating their profile. For example, a departmental user with a single password shared between all department members.
	// (Optional, Default: true) When enabled, this user can update their profile details (except for the password. Only an administrator can update the password). There may be cases in which you want to leave this unset to prevent users from updating their profile. For example, a departmental user with a single password shared between all department members.
	// +kubebuilder:validation:Optional
	ProfileUpdatable *bool `json:"profileUpdatable,omitempty" tf:"profile_updatable,omitempty"`
}

// UserSpec defines the desired state of User
type UserSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UserParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider UserInitParameters `json:"initProvider,omitempty"`
}

// UserStatus defines the observed state of User.
type UserStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UserObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// User is the Schema for the Users API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,artifactory}
type User struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.email) || (has(self.initProvider) && has(self.initProvider.email))",message="spec.forProvider.email is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   UserSpec   `json:"spec"`
	Status UserStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserList contains a list of Users
type UserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []User `json:"items"`
}

// Repository type metadata.
var (
	User_Kind             = "User"
	User_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: User_Kind}.String()
	User_KindAPIVersion   = User_Kind + "." + CRDGroupVersion.String()
	User_GroupVersionKind = CRDGroupVersion.WithKind(User_Kind)
)

func init() {
	SchemeBuilder.Register(&User{}, &UserList{})
}
