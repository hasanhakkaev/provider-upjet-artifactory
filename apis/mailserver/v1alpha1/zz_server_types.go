// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServerInitParameters struct {

	// (String) The Artifactory URL to to link to in all outgoing messages.
	// The Artifactory URL to to link to in all outgoing messages.
	ArtifactoryURL *string `json:"artifactoryUrl,omitempty" tf:"artifactory_url,omitempty"`

	// (Boolean) When set, mail notifications are enabled.
	// When set, mail notifications are enabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The 'from' address header to use in all outgoing messages.
	// The 'from' address header to use in all outgoing messages.
	From *string `json:"from,omitempty" tf:"from,omitempty"`

	// (String) The mail server IP address / DNS.
	// The mail server IP address / DNS.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// (String) The password for authentication with the mail server.
	// The password for authentication with the mail server.
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// (Number) The port number of the mail server.
	// The port number of the mail server.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (String) A prefix to use for the subject of all outgoing mails.
	// A prefix to use for the subject of all outgoing mails.
	SubjectPrefix *string `json:"subjectPrefix,omitempty" tf:"subject_prefix,omitempty"`

	// (Boolean) When set to 'true', uses a secure connection to the mail server.
	// When set to 'true', uses a secure connection to the mail server.
	UseSSL *bool `json:"useSsl,omitempty" tf:"use_ssl,omitempty"`

	// (Boolean) When set to 'true', uses Transport Layer Security when connecting to the mail server.
	// When set to 'true', uses Transport Layer Security when connecting to the mail server.
	UseTLS *bool `json:"useTls,omitempty" tf:"use_tls,omitempty"`

	// (String) The username for authentication with the mail server.
	// The username for authentication with the mail server.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type ServerObservation struct {

	// (String) The Artifactory URL to to link to in all outgoing messages.
	// The Artifactory URL to to link to in all outgoing messages.
	ArtifactoryURL *string `json:"artifactoryUrl,omitempty" tf:"artifactory_url,omitempty"`

	// (Boolean) When set, mail notifications are enabled.
	// When set, mail notifications are enabled.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The 'from' address header to use in all outgoing messages.
	// The 'from' address header to use in all outgoing messages.
	From *string `json:"from,omitempty" tf:"from,omitempty"`

	// (String) The mail server IP address / DNS.
	// The mail server IP address / DNS.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The password for authentication with the mail server.
	// The password for authentication with the mail server.
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// (Number) The port number of the mail server.
	// The port number of the mail server.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (String) A prefix to use for the subject of all outgoing mails.
	// A prefix to use for the subject of all outgoing mails.
	SubjectPrefix *string `json:"subjectPrefix,omitempty" tf:"subject_prefix,omitempty"`

	// (Boolean) When set to 'true', uses a secure connection to the mail server.
	// When set to 'true', uses a secure connection to the mail server.
	UseSSL *bool `json:"useSsl,omitempty" tf:"use_ssl,omitempty"`

	// (Boolean) When set to 'true', uses Transport Layer Security when connecting to the mail server.
	// When set to 'true', uses Transport Layer Security when connecting to the mail server.
	UseTLS *bool `json:"useTls,omitempty" tf:"use_tls,omitempty"`

	// (String) The username for authentication with the mail server.
	// The username for authentication with the mail server.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type ServerParameters struct {

	// (String) The Artifactory URL to to link to in all outgoing messages.
	// The Artifactory URL to to link to in all outgoing messages.
	// +kubebuilder:validation:Optional
	ArtifactoryURL *string `json:"artifactoryUrl,omitempty" tf:"artifactory_url,omitempty"`

	// (Boolean) When set, mail notifications are enabled.
	// When set, mail notifications are enabled.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The 'from' address header to use in all outgoing messages.
	// The 'from' address header to use in all outgoing messages.
	// +kubebuilder:validation:Optional
	From *string `json:"from,omitempty" tf:"from,omitempty"`

	// (String) The mail server IP address / DNS.
	// The mail server IP address / DNS.
	// +kubebuilder:validation:Optional
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// (String) The password for authentication with the mail server.
	// The password for authentication with the mail server.
	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// (Number) The port number of the mail server.
	// The port number of the mail server.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (String) A prefix to use for the subject of all outgoing mails.
	// A prefix to use for the subject of all outgoing mails.
	// +kubebuilder:validation:Optional
	SubjectPrefix *string `json:"subjectPrefix,omitempty" tf:"subject_prefix,omitempty"`

	// (Boolean) When set to 'true', uses a secure connection to the mail server.
	// When set to 'true', uses a secure connection to the mail server.
	// +kubebuilder:validation:Optional
	UseSSL *bool `json:"useSsl,omitempty" tf:"use_ssl,omitempty"`

	// (Boolean) When set to 'true', uses Transport Layer Security when connecting to the mail server.
	// When set to 'true', uses Transport Layer Security when connecting to the mail server.
	// +kubebuilder:validation:Optional
	UseTLS *bool `json:"useTls,omitempty" tf:"use_tls,omitempty"`

	// (String) The username for authentication with the mail server.
	// The username for authentication with the mail server.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

// ServerSpec defines the desired state of Server
type ServerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServerParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ServerInitParameters `json:"initProvider,omitempty"`
}

// ServerStatus defines the observed state of Server.
type ServerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Server is the Schema for the Servers API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,artifactory}
type Server struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || (has(self.initProvider) && has(self.initProvider.enabled))",message="spec.forProvider.enabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.host) || (has(self.initProvider) && has(self.initProvider.host))",message="spec.forProvider.host is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.port) || (has(self.initProvider) && has(self.initProvider.port))",message="spec.forProvider.port is a required parameter"
	Spec   ServerSpec   `json:"spec"`
	Status ServerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServerList contains a list of Servers
type ServerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Server `json:"items"`
}

// Repository type metadata.
var (
	Server_Kind             = "Server"
	Server_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Server_Kind}.String()
	Server_KindAPIVersion   = Server_Kind + "." + CRDGroupVersion.String()
	Server_GroupVersionKind = CRDGroupVersion.WithKind(Server_Kind)
)

func init() {
	SchemeBuilder.Register(&Server{}, &ServerList{})
}
