// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PredefinedValueInitParameters struct {

	// Whether the value is selected by default in the UI.
	// Whether the value is selected by default in the UI.
	DefaultValue *bool `json:"defaultValue,omitempty" tf:"default_value,omitempty"`

	// Property set name.
	// Predefined property name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type PredefinedValueObservation struct {

	// Whether the value is selected by default in the UI.
	// Whether the value is selected by default in the UI.
	DefaultValue *bool `json:"defaultValue,omitempty" tf:"default_value,omitempty"`

	// Property set name.
	// Predefined property name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type PredefinedValueParameters struct {

	// Whether the value is selected by default in the UI.
	// Whether the value is selected by default in the UI.
	// +kubebuilder:validation:Optional
	DefaultValue *bool `json:"defaultValue" tf:"default_value,omitempty"`

	// Property set name.
	// Predefined property name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`
}

type PropertyInitParameters struct {

	// Disables multiple_choice if set to false at the same time with multiple_choice set to true. Default value is false
	// Disables "multiple_choice" if set to "false" at the same time with multiple_choice set to "true".
	ClosedPredefinedValues *bool `json:"closedPredefinedValues,omitempty" tf:"closed_predefined_values,omitempty"`

	// Defines if user can select multiple values. closed_predefined_values should be set to true. Default value is false.
	// Whether or not user can select multiple values. "closed_predefined_values" should be set to "true".
	MultipleChoice *bool `json:"multipleChoice,omitempty" tf:"multiple_choice,omitempty"`

	// Property set name.
	// The name of the property.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Properties in the property set.
	// Properties in the property set.
	PredefinedValue []PredefinedValueInitParameters `json:"predefinedValue,omitempty" tf:"predefined_value,omitempty"`
}

type PropertyObservation struct {

	// Disables multiple_choice if set to false at the same time with multiple_choice set to true. Default value is false
	// Disables "multiple_choice" if set to "false" at the same time with multiple_choice set to "true".
	ClosedPredefinedValues *bool `json:"closedPredefinedValues,omitempty" tf:"closed_predefined_values,omitempty"`

	// Defines if user can select multiple values. closed_predefined_values should be set to true. Default value is false.
	// Whether or not user can select multiple values. "closed_predefined_values" should be set to "true".
	MultipleChoice *bool `json:"multipleChoice,omitempty" tf:"multiple_choice,omitempty"`

	// Property set name.
	// The name of the property.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Properties in the property set.
	// Properties in the property set.
	PredefinedValue []PredefinedValueObservation `json:"predefinedValue,omitempty" tf:"predefined_value,omitempty"`
}

type PropertyParameters struct {

	// Disables multiple_choice if set to false at the same time with multiple_choice set to true. Default value is false
	// Disables "multiple_choice" if set to "false" at the same time with multiple_choice set to "true".
	// +kubebuilder:validation:Optional
	ClosedPredefinedValues *bool `json:"closedPredefinedValues,omitempty" tf:"closed_predefined_values,omitempty"`

	// Defines if user can select multiple values. closed_predefined_values should be set to true. Default value is false.
	// Whether or not user can select multiple values. "closed_predefined_values" should be set to "true".
	// +kubebuilder:validation:Optional
	MultipleChoice *bool `json:"multipleChoice,omitempty" tf:"multiple_choice,omitempty"`

	// Property set name.
	// The name of the property.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Properties in the property set.
	// Properties in the property set.
	// +kubebuilder:validation:Optional
	PredefinedValue []PredefinedValueParameters `json:"predefinedValue" tf:"predefined_value,omitempty"`
}

type SetInitParameters struct {

	// Property set name.
	// Property set name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A list of properties that will be part of the property set.
	// A list of properties that will be part of the property set.
	Property []PropertyInitParameters `json:"property,omitempty" tf:"property,omitempty"`

	// Defines if the list visible and assignable to the repository or artifact. Default value is true.
	// Defines if the list visible and assignable to the repository or artifact.
	Visible *bool `json:"visible,omitempty" tf:"visible,omitempty"`
}

type SetObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Property set name.
	// Property set name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A list of properties that will be part of the property set.
	// A list of properties that will be part of the property set.
	Property []PropertyObservation `json:"property,omitempty" tf:"property,omitempty"`

	// Defines if the list visible and assignable to the repository or artifact. Default value is true.
	// Defines if the list visible and assignable to the repository or artifact.
	Visible *bool `json:"visible,omitempty" tf:"visible,omitempty"`
}

type SetParameters struct {

	// Property set name.
	// Property set name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// A list of properties that will be part of the property set.
	// A list of properties that will be part of the property set.
	// +kubebuilder:validation:Optional
	Property []PropertyParameters `json:"property,omitempty" tf:"property,omitempty"`

	// Defines if the list visible and assignable to the repository or artifact. Default value is true.
	// Defines if the list visible and assignable to the repository or artifact.
	// +kubebuilder:validation:Optional
	Visible *bool `json:"visible,omitempty" tf:"visible,omitempty"`
}

// SetSpec defines the desired state of Set
type SetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SetParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SetInitParameters `json:"initProvider,omitempty"`
}

// SetStatus defines the observed state of Set.
type SetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Set is the Schema for the Sets API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,artifactory}
type Set struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.property) || (has(self.initProvider) && has(self.initProvider.property))",message="spec.forProvider.property is a required parameter"
	Spec   SetSpec   `json:"spec"`
	Status SetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SetList contains a list of Sets
type SetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Set `json:"items"`
}

// Repository type metadata.
var (
	Set_Kind             = "Set"
	Set_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Set_Kind}.String()
	Set_KindAPIVersion   = Set_Kind + "." + CRDGroupVersion.String()
	Set_GroupVersionKind = CRDGroupVersion.WithKind(Set_Kind)
)

func init() {
	SchemeBuilder.Register(&Set{}, &SetList{})
}
