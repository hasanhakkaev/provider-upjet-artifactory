// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SettingsInitParameters struct {

	// Allow persisted users to access their profile.  Default value is "true".
	AllowUserToAccessProfile *bool `json:"allowUserToAccessProfile,omitempty" tf:"allow_user_to_access_profile,omitempty"`

	// Auto redirect to login through the IdP when clicking on Artifactory's login link.  Default value is "false".
	AutoRedirect *bool `json:"autoRedirect,omitempty" tf:"auto_redirect,omitempty"`

	// SAML certificate that contains the public key for the IdP service provider.  Used by Artifactory to verify sign-in requests. Default value is "".
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// Name of the attribute in the SAML response from the IdP that contains the user's email. Default value is "".
	EmailAttribute *string `json:"emailAttribute,omitempty" tf:"email_attribute,omitempty"`

	// Enable SAML SSO.  Default value is "true".
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`

	// Name of the attribute in the SAML response from the IdP that contains the user's group memberships. Default value is "".
	GroupAttribute *string `json:"groupAttribute,omitempty" tf:"group_attribute,omitempty"`

	// Service provider login url configured on the IdP.
	LoginURL *string `json:"loginUrl,omitempty" tf:"login_url,omitempty"`

	// Service provider logout url, or where to redirect after user logs out.
	LogoutURL *string `json:"logoutUrl,omitempty" tf:"logout_url,omitempty"`

	// When automatic user creation is off, authenticated users are not automatically created inside Artifactory. Instead, for every request from an SSO user, the user is temporarily associated with default groups (if such groups are defined), and the permissions for these groups apply. Without auto-user creation, you must manually create the user inside Artifactory to manage user permissions not attached to their default groups. Default value is "false".
	NoAutoUserCreation *bool `json:"noAutoUserCreation,omitempty" tf:"no_auto_user_creation,omitempty"`

	// The SAML service provider name. This should be a URI that is also known as the entityID, providerID, or entity identity.
	ServiceProviderName *string `json:"serviceProviderName,omitempty" tf:"service_provider_name,omitempty"`

	// Associate user with Artifactory groups based on the "group_attribute" provided in the SAML response from the identity provider.  Default value is "false".
	SyncGroups *bool `json:"syncGroups,omitempty" tf:"sync_groups,omitempty"`

	// When set, an X.509 public certificate will be created by Artifactory. Download this certificate and upload it to your IDP and choose your own encryption algorithm. This process will let you encrypt the assertion section in your SAML response. Default value is "false".
	UseEncryptedAssertion *bool `json:"useEncryptedAssertion,omitempty" tf:"use_encrypted_assertion,omitempty"`

	// Enable "audience", or who the SAML assertion is intended for.  Ensures that the correct service provider intended for Artifactory is used on the IdP. Default value is "true".
	VerifyAudienceRestriction *bool `json:"verifyAudienceRestriction,omitempty" tf:"verify_audience_restriction,omitempty"`
}

type SettingsObservation struct {

	// Allow persisted users to access their profile.  Default value is "true".
	AllowUserToAccessProfile *bool `json:"allowUserToAccessProfile,omitempty" tf:"allow_user_to_access_profile,omitempty"`

	// Auto redirect to login through the IdP when clicking on Artifactory's login link.  Default value is "false".
	AutoRedirect *bool `json:"autoRedirect,omitempty" tf:"auto_redirect,omitempty"`

	// SAML certificate that contains the public key for the IdP service provider.  Used by Artifactory to verify sign-in requests. Default value is "".
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// Name of the attribute in the SAML response from the IdP that contains the user's email. Default value is "".
	EmailAttribute *string `json:"emailAttribute,omitempty" tf:"email_attribute,omitempty"`

	// Enable SAML SSO.  Default value is "true".
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`

	// Name of the attribute in the SAML response from the IdP that contains the user's group memberships. Default value is "".
	GroupAttribute *string `json:"groupAttribute,omitempty" tf:"group_attribute,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Service provider login url configured on the IdP.
	LoginURL *string `json:"loginUrl,omitempty" tf:"login_url,omitempty"`

	// Service provider logout url, or where to redirect after user logs out.
	LogoutURL *string `json:"logoutUrl,omitempty" tf:"logout_url,omitempty"`

	// When automatic user creation is off, authenticated users are not automatically created inside Artifactory. Instead, for every request from an SSO user, the user is temporarily associated with default groups (if such groups are defined), and the permissions for these groups apply. Without auto-user creation, you must manually create the user inside Artifactory to manage user permissions not attached to their default groups. Default value is "false".
	NoAutoUserCreation *bool `json:"noAutoUserCreation,omitempty" tf:"no_auto_user_creation,omitempty"`

	// The SAML service provider name. This should be a URI that is also known as the entityID, providerID, or entity identity.
	ServiceProviderName *string `json:"serviceProviderName,omitempty" tf:"service_provider_name,omitempty"`

	// Associate user with Artifactory groups based on the "group_attribute" provided in the SAML response from the identity provider.  Default value is "false".
	SyncGroups *bool `json:"syncGroups,omitempty" tf:"sync_groups,omitempty"`

	// When set, an X.509 public certificate will be created by Artifactory. Download this certificate and upload it to your IDP and choose your own encryption algorithm. This process will let you encrypt the assertion section in your SAML response. Default value is "false".
	UseEncryptedAssertion *bool `json:"useEncryptedAssertion,omitempty" tf:"use_encrypted_assertion,omitempty"`

	// Enable "audience", or who the SAML assertion is intended for.  Ensures that the correct service provider intended for Artifactory is used on the IdP. Default value is "true".
	VerifyAudienceRestriction *bool `json:"verifyAudienceRestriction,omitempty" tf:"verify_audience_restriction,omitempty"`
}

type SettingsParameters struct {

	// Allow persisted users to access their profile.  Default value is "true".
	// +kubebuilder:validation:Optional
	AllowUserToAccessProfile *bool `json:"allowUserToAccessProfile,omitempty" tf:"allow_user_to_access_profile,omitempty"`

	// Auto redirect to login through the IdP when clicking on Artifactory's login link.  Default value is "false".
	// +kubebuilder:validation:Optional
	AutoRedirect *bool `json:"autoRedirect,omitempty" tf:"auto_redirect,omitempty"`

	// SAML certificate that contains the public key for the IdP service provider.  Used by Artifactory to verify sign-in requests. Default value is "".
	// +kubebuilder:validation:Optional
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// Name of the attribute in the SAML response from the IdP that contains the user's email. Default value is "".
	// +kubebuilder:validation:Optional
	EmailAttribute *string `json:"emailAttribute,omitempty" tf:"email_attribute,omitempty"`

	// Enable SAML SSO.  Default value is "true".
	// +kubebuilder:validation:Optional
	Enable *bool `json:"enable,omitempty" tf:"enable,omitempty"`

	// Name of the attribute in the SAML response from the IdP that contains the user's group memberships. Default value is "".
	// +kubebuilder:validation:Optional
	GroupAttribute *string `json:"groupAttribute,omitempty" tf:"group_attribute,omitempty"`

	// Service provider login url configured on the IdP.
	// +kubebuilder:validation:Optional
	LoginURL *string `json:"loginUrl,omitempty" tf:"login_url,omitempty"`

	// Service provider logout url, or where to redirect after user logs out.
	// +kubebuilder:validation:Optional
	LogoutURL *string `json:"logoutUrl,omitempty" tf:"logout_url,omitempty"`

	// When automatic user creation is off, authenticated users are not automatically created inside Artifactory. Instead, for every request from an SSO user, the user is temporarily associated with default groups (if such groups are defined), and the permissions for these groups apply. Without auto-user creation, you must manually create the user inside Artifactory to manage user permissions not attached to their default groups. Default value is "false".
	// +kubebuilder:validation:Optional
	NoAutoUserCreation *bool `json:"noAutoUserCreation,omitempty" tf:"no_auto_user_creation,omitempty"`

	// The SAML service provider name. This should be a URI that is also known as the entityID, providerID, or entity identity.
	// +kubebuilder:validation:Optional
	ServiceProviderName *string `json:"serviceProviderName,omitempty" tf:"service_provider_name,omitempty"`

	// Associate user with Artifactory groups based on the "group_attribute" provided in the SAML response from the identity provider.  Default value is "false".
	// +kubebuilder:validation:Optional
	SyncGroups *bool `json:"syncGroups,omitempty" tf:"sync_groups,omitempty"`

	// When set, an X.509 public certificate will be created by Artifactory. Download this certificate and upload it to your IDP and choose your own encryption algorithm. This process will let you encrypt the assertion section in your SAML response. Default value is "false".
	// +kubebuilder:validation:Optional
	UseEncryptedAssertion *bool `json:"useEncryptedAssertion,omitempty" tf:"use_encrypted_assertion,omitempty"`

	// Enable "audience", or who the SAML assertion is intended for.  Ensures that the correct service provider intended for Artifactory is used on the IdP. Default value is "true".
	// +kubebuilder:validation:Optional
	VerifyAudienceRestriction *bool `json:"verifyAudienceRestriction,omitempty" tf:"verify_audience_restriction,omitempty"`
}

// SettingsSpec defines the desired state of Settings
type SettingsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SettingsParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SettingsInitParameters `json:"initProvider,omitempty"`
}

// SettingsStatus defines the observed state of Settings.
type SettingsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SettingsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Settings is the Schema for the Settingss API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,artifactory}
type Settings struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.loginUrl) || (has(self.initProvider) && has(self.initProvider.loginUrl))",message="spec.forProvider.loginUrl is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.logoutUrl) || (has(self.initProvider) && has(self.initProvider.logoutUrl))",message="spec.forProvider.logoutUrl is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceProviderName) || (has(self.initProvider) && has(self.initProvider.serviceProviderName))",message="spec.forProvider.serviceProviderName is a required parameter"
	Spec   SettingsSpec   `json:"spec"`
	Status SettingsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SettingsList contains a list of Settingss
type SettingsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Settings `json:"items"`
}

// Repository type metadata.
var (
	Settings_Kind             = "Settings"
	Settings_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Settings_Kind}.String()
	Settings_KindAPIVersion   = Settings_Kind + "." + CRDGroupVersion.String()
	Settings_GroupVersionKind = CRDGroupVersion.WithKind(Settings_Kind)
)

func init() {
	SchemeBuilder.Register(&Settings{}, &SettingsList{})
}
