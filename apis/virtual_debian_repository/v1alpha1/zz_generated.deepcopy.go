//go:build !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DebianRepository) DeepCopyInto(out *DebianRepository) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DebianRepository.
func (in *DebianRepository) DeepCopy() *DebianRepository {
	if in == nil {
		return nil
	}
	out := new(DebianRepository)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DebianRepository) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DebianRepositoryInitParameters) DeepCopyInto(out *DebianRepositoryInitParameters) {
	*out = *in
	if in.ArtifactoryRequestsCanRetrieveRemoteArtifacts != nil {
		in, out := &in.ArtifactoryRequestsCanRetrieveRemoteArtifacts, &out.ArtifactoryRequestsCanRetrieveRemoteArtifacts
		*out = new(bool)
		**out = **in
	}
	if in.DebianDefaultArchitectures != nil {
		in, out := &in.DebianDefaultArchitectures, &out.DebianDefaultArchitectures
		*out = new(string)
		**out = **in
	}
	if in.DefaultDeploymentRepo != nil {
		in, out := &in.DefaultDeploymentRepo, &out.DefaultDeploymentRepo
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.OptionalIndexCompressionFormats != nil {
		in, out := &in.OptionalIndexCompressionFormats, &out.OptionalIndexCompressionFormats
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PrimaryKeypairRef != nil {
		in, out := &in.PrimaryKeypairRef, &out.PrimaryKeypairRef
		*out = new(string)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.Repositories != nil {
		in, out := &in.Repositories, &out.Repositories
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.SecondaryKeypairRef != nil {
		in, out := &in.SecondaryKeypairRef, &out.SecondaryKeypairRef
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DebianRepositoryInitParameters.
func (in *DebianRepositoryInitParameters) DeepCopy() *DebianRepositoryInitParameters {
	if in == nil {
		return nil
	}
	out := new(DebianRepositoryInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DebianRepositoryList) DeepCopyInto(out *DebianRepositoryList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]DebianRepository, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DebianRepositoryList.
func (in *DebianRepositoryList) DeepCopy() *DebianRepositoryList {
	if in == nil {
		return nil
	}
	out := new(DebianRepositoryList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DebianRepositoryList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DebianRepositoryObservation) DeepCopyInto(out *DebianRepositoryObservation) {
	*out = *in
	if in.ArtifactoryRequestsCanRetrieveRemoteArtifacts != nil {
		in, out := &in.ArtifactoryRequestsCanRetrieveRemoteArtifacts, &out.ArtifactoryRequestsCanRetrieveRemoteArtifacts
		*out = new(bool)
		**out = **in
	}
	if in.DebianDefaultArchitectures != nil {
		in, out := &in.DebianDefaultArchitectures, &out.DebianDefaultArchitectures
		*out = new(string)
		**out = **in
	}
	if in.DefaultDeploymentRepo != nil {
		in, out := &in.DefaultDeploymentRepo, &out.DefaultDeploymentRepo
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.OptionalIndexCompressionFormats != nil {
		in, out := &in.OptionalIndexCompressionFormats, &out.OptionalIndexCompressionFormats
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PackageType != nil {
		in, out := &in.PackageType, &out.PackageType
		*out = new(string)
		**out = **in
	}
	if in.PrimaryKeypairRef != nil {
		in, out := &in.PrimaryKeypairRef, &out.PrimaryKeypairRef
		*out = new(string)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.Repositories != nil {
		in, out := &in.Repositories, &out.Repositories
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.SecondaryKeypairRef != nil {
		in, out := &in.SecondaryKeypairRef, &out.SecondaryKeypairRef
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DebianRepositoryObservation.
func (in *DebianRepositoryObservation) DeepCopy() *DebianRepositoryObservation {
	if in == nil {
		return nil
	}
	out := new(DebianRepositoryObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DebianRepositoryParameters) DeepCopyInto(out *DebianRepositoryParameters) {
	*out = *in
	if in.ArtifactoryRequestsCanRetrieveRemoteArtifacts != nil {
		in, out := &in.ArtifactoryRequestsCanRetrieveRemoteArtifacts, &out.ArtifactoryRequestsCanRetrieveRemoteArtifacts
		*out = new(bool)
		**out = **in
	}
	if in.DebianDefaultArchitectures != nil {
		in, out := &in.DebianDefaultArchitectures, &out.DebianDefaultArchitectures
		*out = new(string)
		**out = **in
	}
	if in.DefaultDeploymentRepo != nil {
		in, out := &in.DefaultDeploymentRepo, &out.DefaultDeploymentRepo
		*out = new(string)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.ExcludesPattern != nil {
		in, out := &in.ExcludesPattern, &out.ExcludesPattern
		*out = new(string)
		**out = **in
	}
	if in.IncludesPattern != nil {
		in, out := &in.IncludesPattern, &out.IncludesPattern
		*out = new(string)
		**out = **in
	}
	if in.Key != nil {
		in, out := &in.Key, &out.Key
		*out = new(string)
		**out = **in
	}
	if in.Notes != nil {
		in, out := &in.Notes, &out.Notes
		*out = new(string)
		**out = **in
	}
	if in.OptionalIndexCompressionFormats != nil {
		in, out := &in.OptionalIndexCompressionFormats, &out.OptionalIndexCompressionFormats
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PrimaryKeypairRef != nil {
		in, out := &in.PrimaryKeypairRef, &out.PrimaryKeypairRef
		*out = new(string)
		**out = **in
	}
	if in.ProjectEnvironments != nil {
		in, out := &in.ProjectEnvironments, &out.ProjectEnvironments
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ProjectKey != nil {
		in, out := &in.ProjectKey, &out.ProjectKey
		*out = new(string)
		**out = **in
	}
	if in.RepoLayoutRef != nil {
		in, out := &in.RepoLayoutRef, &out.RepoLayoutRef
		*out = new(string)
		**out = **in
	}
	if in.Repositories != nil {
		in, out := &in.Repositories, &out.Repositories
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.RetrievalCachePeriodSeconds != nil {
		in, out := &in.RetrievalCachePeriodSeconds, &out.RetrievalCachePeriodSeconds
		*out = new(float64)
		**out = **in
	}
	if in.SecondaryKeypairRef != nil {
		in, out := &in.SecondaryKeypairRef, &out.SecondaryKeypairRef
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DebianRepositoryParameters.
func (in *DebianRepositoryParameters) DeepCopy() *DebianRepositoryParameters {
	if in == nil {
		return nil
	}
	out := new(DebianRepositoryParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DebianRepositorySpec) DeepCopyInto(out *DebianRepositorySpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DebianRepositorySpec.
func (in *DebianRepositorySpec) DeepCopy() *DebianRepositorySpec {
	if in == nil {
		return nil
	}
	out := new(DebianRepositorySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DebianRepositoryStatus) DeepCopyInto(out *DebianRepositoryStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DebianRepositoryStatus.
func (in *DebianRepositoryStatus) DeepCopy() *DebianRepositoryStatus {
	if in == nil {
		return nil
	}
	out := new(DebianRepositoryStatus)
	in.DeepCopyInto(out)
	return out
}
